<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on 項 思 偉 ~ Aal Izz Well!</title>
    <link>https://daveixiang.github.io/articles/index.xml</link>
    <description>Recent content in Articles on 項 思 偉 ~ Aal Izz Well!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 25 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://daveixiang.github.io/articles/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>linux pci device driver using mmio demo</title>
      <link>https://daveixiang.github.io/articles/2017_04_25_linux_pci_device_driver_using_mmio_demo/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_25_linux_pci_device_driver_using_mmio_demo/</guid>
      <description>

&lt;p&gt;The pci driver is written to drive the qemu pci-helloworld device&lt;/p&gt;

&lt;h1 id=&#34;pci-helloworld-driver-source-code&#34;&gt;&lt;em&gt;pci-helloworld&lt;/em&gt; driver source code&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;the driver code &lt;em&gt;pci-helloworld&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;linux/init.h&amp;gt;
#include &amp;lt;linux/kernel.h&amp;gt;
#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;linux/pci.h&amp;gt;
#include &amp;lt;linux/printk.h&amp;gt;
#include &amp;lt;linux/proc_fs.h&amp;gt;
#include &amp;lt;linux/seq_file.h&amp;gt;

MODULE_LICENSE(&amp;quot;GPL&amp;quot;);

static struct pci_dev *_pdev;
static void __iomem *_mmio;

static const struct pci_device_id pcidevtbl[] = {

        { 0x6688, 0x0001, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 },
        { } /* terminate */

};

void pci_helloworld_reset_pointer(void __iomem *mmio)
{
        iowrite8(1, mmio + 1);
}

void pci_helloworld_set_buf_len(void __iomem *mmio, uint8_t len)
{
        iowrite8(len, mmio + 2);
}

void pci_helloworld_write_char(void __iomem *mmio, char c)
{
        iowrite8(c, mmio + 0);
}

static int pci_helloworld_show(struct seq_file *m, void *v) {
        int i, len;
        char *buf;

        if (!_mmio) {
                pr_emerg(&amp;quot;pci_iomap failed!\n&amp;quot;);
                return -ENODEV;
        }

        pci_helloworld_reset_pointer(_mmio);

        len = ioread8(_mmio + 1);
        if (len) {
                buf = kmalloc(len + 1, GFP_KERNEL);
                if (!buf)
                        return -ENOMEM;
        } else {
                buf = &amp;quot;&amp;quot;;
        }

        for (i = 0; i &amp;lt; len; i++)
                buf[i] = ioread8(_mmio);

        seq_printf(m, &amp;quot;%s&amp;quot;, buf);

        return 0;
}

static int pci_helloworld_open(struct inode *inode, struct file *file) {
        return single_open(file, pci_helloworld_show, NULL);
}

ssize_t pci_helloworld_write (struct file *file, const char __user *buf, size_t len,
                        loff_t *l)
{
        int i = 0;

        if (!_mmio) {
                pr_emerg(&amp;quot;failed to pci_iomap\n&amp;quot;);
                return 0;
        }

        pci_helloworld_reset_pointer(_mmio);
        pci_helloworld_set_buf_len(_mmio, len + 1);

        for(i = 0; i &amp;lt; len; i ++)
                pci_helloworld_write_char(_mmio, buf[i]);

        return i;
}

static const struct file_operations proc_fops = {
        .owner = THIS_MODULE,
        .open = pci_helloworld_open,
        .read = seq_read,
        .write = pci_helloworld_write,
        .llseek = seq_lseek,
        .release = single_release,
};

static int pci_helloworld_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
{
        void __iomem *mmio;
        char *buf;
        int len, i;
        struct proc_dir_entry *proc_entry;

        pr_debug(&amp;quot;probed pci dev, trying read.\n&amp;quot;);

        mmio = pci_iomap(pdev, 0, 0);
        if (!mmio) {
                pr_emerg(&amp;quot;failed to iomap!\n&amp;quot;);
                return -ENODEV;
        }

        len = ioread8(mmio + 1);
        pr_info(&amp;quot;length of string: %d bytes\n&amp;quot;, len);

        buf = kmalloc(len + 1, GFP_KERNEL);
        if (!buf) {
                pr_err(&amp;quot;no memory...\n&amp;quot;);
                return -ENOMEM;
        }

        for (i = 0; i &amp;lt; len; i++)
                buf[i] = ioread8(mmio);

        pr_info(&amp;quot;read this string: %s&amp;quot;, buf);

        proc_entry = proc_create(&amp;quot;helloworld&amp;quot;, 0755, NULL, &amp;amp;proc_fops);

        _mmio = mmio;
        _pdev = pdev;
        return 0;
}

static void pci_helloworld_remove(struct pci_dev *pdev) {
        pr_debug(&amp;quot;unloaded device\n&amp;quot;);
}

static struct pci_driver helloworld_pci_driver = {
        .name = &amp;quot;PCI-Hello-World driver&amp;quot;,
        .id_table = pcidevtbl,
        .probe = pci_helloworld_probe,
        .remove = pci_helloworld_remove,

};

static int __init pci_helloworld_init(void)
{
        int rc;
        pr_debug(&amp;quot;pci device driver online.\n&amp;quot;);

        rc = pci_register_driver(&amp;amp;helloworld_pci_driver);
        if (rc) {
                pr_err(&amp;quot;failed to register driver.\n&amp;quot;);
                return rc;
        }

        return 0;
}

static void __exit pci_helloworld_exit(void)
{
        pr_debug(&amp;quot;driver unloaded :-(\n&amp;quot;);
        return;
}

module_init(pci_helloworld_init);
module_exit(pci_helloworld_exit);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;the makefile&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;obj-m := pci-helloworld.o

ifeq ($(KERNELRELEASE),)  

KERNELDIR ?= /lib/modules/$(shell uname -r)/build 
PWD := $(shell pwd)  

all:
        $(MAKE) -C $(KERNELDIR) M=$(PWD) modules  
clean:
        $(MAKE) -C $(KERNELDIR) M=$(PWD) clean
else  

$(info Building with KERNELRELEASE = ${KERNELRELEASE})  

endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;load-the-module-and-test&#34;&gt;Load the module and test&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Load the module&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;insmod pci-helloworld.ko
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Test the module&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /proc/helloworld # Hello, world!

echo &amp;quot;davei&amp;quot; &amp;gt; /proc/hellworld

cat /proc/helloworld # davei
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>qemu pci device demo</title>
      <link>https://daveixiang.github.io/articles/2017_04_25_qemu_pci_device_demo/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_25_qemu_pci_device_demo/</guid>
      <description>

&lt;h2 id=&#34;add-the-device-source-code-qemu-src-hw-misc-pci-helloworld-c&#34;&gt;Add the device source code &lt;em&gt;{QEMU_SRC}/hw/misc/pci-helloworld.c&lt;/em&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;quot;qemu/osdep.h&amp;quot;
#include &amp;quot;hw/hw.h&amp;quot;
#include &amp;quot;hw/pci/pci.h&amp;quot;
#include &amp;quot;qemu/event_notifier.h&amp;quot;

typedef struct PCIHelloWorldDevState {
    PCIDevice parent_obj;

    int pos;
    char *buf;
    int buflen;

    MemoryRegion mmio;
} PCIHelloWorldDevState;

#define TYPE_PCI_HELLOWORLD_DEV &amp;quot;pci-helloworld&amp;quot;

#define PCI_HELLOWORLD_DEV(obj) \
    OBJECT_CHECK(PCIHelloWorldDevState, (obj), TYPE_PCI_HELLOWORLD_DEV)

static uint64_t
pci_helloworld_dev_mmio_read(void *opaque, hwaddr addr, unsigned size)
{
    PCIHelloWorldDevState *d = opaque;

    if (addr == 0)
        return d-&amp;gt;buf[d-&amp;gt;pos ++];
    else
        return d-&amp;gt;buflen;
}

static void
pci_helloworld_dev_mmio_write(void *opaque, hwaddr addr, uint64_t val,
                       unsigned size)
{

   PCIHelloWorldDevState *d = opaque;

   switch(addr) {
       case 0:
           /* write byte */
           if (!d-&amp;gt;buf)
               break;
           if (d-&amp;gt;pos &amp;gt;= d-&amp;gt;buflen)
               break;
           d-&amp;gt;buf[d-&amp;gt;pos ++] = (uint8_t)val;
           break;
       case 1:
           /* reset pos */
           d-&amp;gt;pos = 0;
           break;
       case 2:
           /* set buffer length */
           d-&amp;gt;buflen = val + 1;
           g_free(d-&amp;gt;buf);
           d-&amp;gt;buf = g_malloc(d-&amp;gt;buflen);
           break;
   }

   return;
}

static const MemoryRegionOps pci_helloworld_dev_mmio_ops = {
    .read = pci_helloworld_dev_mmio_read,
    .write = pci_helloworld_dev_mmio_write,
    .endianness = DEVICE_LITTLE_ENDIAN,
    .impl = {
        .min_access_size = 1,
        .max_access_size = 1,
    },
};

static int
pci_helloworld_dev_init(PCIDevice *pci_dev)
{
    PCIHelloWorldDevState *d = PCI_HELLOWORLD_DEV(pci_dev);
    uint8_t *pci_conf;

    pci_conf = pci_dev-&amp;gt;config;

    pci_conf[PCI_INTERRUPT_PIN] = 0; /* no interrupt pin */

    memory_region_init_io(&amp;amp;d-&amp;gt;mmio, OBJECT(d), &amp;amp;pci_helloworld_dev_mmio_ops, d,
                          &amp;quot;pci-helloworld-dev-mmio&amp;quot;, 128);
    pci_register_bar(pci_dev, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &amp;amp;d-&amp;gt;mmio);

    d-&amp;gt;pos = 0;
    d-&amp;gt;buf = g_malloc(14);
    memcpy(d-&amp;gt;buf, &amp;quot;Hello, world!\n&amp;quot;, 14);
    d-&amp;gt;buflen = 14;
    printf(&amp;quot;Loaded helloworld pci\n&amp;quot;);

    return 0;
}

static void
pci_helloworld_dev_uninit(PCIDevice *dev)
{
    //PCIHelloWorldDevState *d = PCI_HELLOWORLD_DEV(dev);
    printf(&amp;quot;unloaded helloworld pci\n&amp;quot;);
}

static void
qdev_pci_helloworld_dev_reset(DeviceState *dev)
{
    //PCIHelloWorldDevState *d = PCI_HELLOWORLD_DEV(dev);
}

static void
pci_helloworld_dev_class_init(ObjectClass *klass, void *data)
{
    DeviceClass *dc = DEVICE_CLASS(klass);
    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);

    k-&amp;gt;init = pci_helloworld_dev_init;
    k-&amp;gt;exit = pci_helloworld_dev_uninit;
    k-&amp;gt;vendor_id = 0x6688;
    k-&amp;gt;device_id = 0x0001;
    k-&amp;gt;revision = 0x00;
    k-&amp;gt;class_id = PCI_CLASS_OTHERS;
    dc-&amp;gt;desc = &amp;quot;HelloWorld PCI&amp;quot;;
    set_bit(DEVICE_CATEGORY_MISC, dc-&amp;gt;categories);
    dc-&amp;gt;reset = qdev_pci_helloworld_dev_reset;
}

static const TypeInfo pci_helloworld_info = {
    .name          = TYPE_PCI_HELLOWORLD_DEV,
    .parent        = TYPE_PCI_DEVICE,
    .instance_size = sizeof(PCIHelloWorldDevState),
    .class_init    = pci_helloworld_dev_class_init,
};

static void pci_helloworld_register_types(void)
{
    type_register_static(&amp;amp;pci_helloworld_info);
}

type_init(pci_helloworld_register_types)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-the-following-line-to-qemu-src-hw-misc-makefile-objs&#34;&gt;Add the following line to &lt;em&gt;{QEMU_SRC}/hw/misc/Makefile.objs&lt;/em&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;ifeq ($(CONFIG_PCI), y)
obj-y += pci-helloworld.o
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;recompile-the-qemu-source-code-and-check-the-result&#34;&gt;Recompile the qemu source code and check the result&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;get the device list&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x86_64-softmmu/qemu-system-x86_64 -device ? 2&amp;gt;&amp;amp;1 | grep hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and we get the following result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;name &amp;quot;pci-helloworld&amp;quot;, bus PCI, desc &amp;quot;HelloWorld PCI&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;startup vm&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x86_64-softmmu/qemu-system-x86_64  -kernel ./bzImage -initrd ./initramfs -nographic -append  &amp;quot;console=ttyS0 quiet&amp;quot;  -device pci-helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;use &lt;code&gt;lspci&lt;/code&gt; to get pci info:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Loaded helloworld pci
[    0.869296] kvm: no hardware support

Please press Enter to activate this console.  
/ # lspci
00:00.0 Class 0600: 8086:1237
00:01.0 Class 0601: 8086:7000
00:01.1 Class 0101: 8086:7010
00:01.3 Class 0680: 8086:7113
00:02.0 Class 0300: 1234:1111
00:03.0 Class 0200: 8086:100e
00:04.0 Class 00ff: 6688:0001
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>emacs gdb gui customize default layout</title>
      <link>https://daveixiang.github.io/articles/2017_04_11_emacs_gdb_gui_customize_default_layout/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_11_emacs_gdb_gui_customize_default_layout/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;elisp code&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defadvice gdb-setup-windows (after my-setup-gdb-windows activate)
  (gdb-get-buffer-create &#39;gdb-stack-buffer)
  (set-window-dedicated-p (selected-window) nil)
  (switch-to-buffer gud-comint-buffer)
  (delete-other-windows)
  (let ((win0 (selected-window))
        (win1 (split-window nil nil &#39;left))
        (win2 (split-window-below (/ (* (window-height) 1) 2)))
        )

    (select-window win2)
    (gdb-set-window-buffer (if gdb-show-threads-by-default
			       (gdb-threads-buffer-name)
			     (gdb-breakpoints-buffer-name)))
    (split-window nil (/ (* (window-height) 1) 2))

    (other-window 1)
    (gdb-set-window-buffer (gdb-stack-buffer-name))

    (select-window win1)
    (set-window-buffer
     win1
     (if gud-last-last-frame
         (gud-find-file (car gud-last-last-frame))
       (if gdb-main-file
           (gud-find-file gdb-main-file)
         ;; Put buffer list in window if we
         ;; can&#39;t find a source file.
         (list-buffers-noselect))))

    (setq gdb-source-window (selected-window))
    (split-window nil (/ (* (window-height) 1) 2))

    (other-window 1)
    (gdb-set-window-buffer (gdb-get-buffer-create &#39;gdb-disassembly-buffer t))
    (split-window nil (/ (* (window-height) 1) 2))

    (other-window 1)
    (gdb-set-window-buffer (gdb-get-buffer-create &#39;gdb-inferior-io))

    (select-window win0)
    ))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;layout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://daveixiang.github.io/img/gdb-gui-custom.png&#34; alt=&#34;gui layout&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>go tool: no such tool &#39;6g&#39;</title>
      <link>https://daveixiang.github.io/articles/2017_04_07_go_tool_no_such_tool_6g/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_07_go_tool_no_such_tool_6g/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Problem&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;davei@davei:/tmp&amp;gt; go tool 6g test.go
go tool: no such tool &amp;quot;6g&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Solution&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;6g were renamed to &amp;quot;compile&amp;quot; since Go 1.5. So use &amp;quot;compile&amp;quot; instead.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>go tool: no such tool &#39;6l&#39;</title>
      <link>https://daveixiang.github.io/articles/2017_04_07_go_tool_no_such_tool_6l/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_07_go_tool_no_such_tool_6l/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Problem&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;davei@davei:/tmp&amp;gt; go tool 6l test.o
go tool: no such tool &amp;quot;6l&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Solution&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;6l and friends were renamed to &amp;quot;link&amp;quot; since Go 1.5. So use &amp;quot;link&amp;quot; instead.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Configure OpenSuse Leap OpenvSwitch bridge autostart on boot</title>
      <link>https://daveixiang.github.io/articles/2017_04_06_configure_opensuse_leap_openvswitch_bridge_autostart_on_boot/</link>
      <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_06_configure_opensuse_leap_openvswitch_bridge_autostart_on_boot/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;ifcfg-br0&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /etc/sysconfig/network/ifcfg-br0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the output is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;TARTMODE=&#39;auto&#39;
BOOTPROTO=&#39;static&#39;
OVS_BRIDGE=&#39;yes&#39;
OVS_BRIDGE_PORT_DEVICE=&#39;eth1&#39;
IPADDR=&#39;10.0.100.254/24&#39;
BROADCAST=&#39;&#39;
ETHTOOL_OPTIONS=&#39;&#39;
MTU=&#39;&#39;
NAME=&#39;&#39;
NETWORK=&#39;&#39;
REMOTE_IPADDR=&#39;&#39;
STARTMODE=&#39;auto&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ifcfg-eth0&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /etc/sysconfig/network/ifcfg-eth1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the output is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;STARTMODE=&#39;auto&#39;
BOOTPROTO=&#39;none&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Compiling qemu guest agent msi package for windows</title>
      <link>https://daveixiang.github.io/articles/2017_04_05_compiling_qemu_guest_agent_msi_package_for_windows/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_05_compiling_qemu_guest_agent_msi_package_for_windows/</guid>
      <description>

&lt;h2 id=&#34;install-dependencies&#34;&gt;Install dependencies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mingw cross compilation toolchain&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;msitool&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;flex bison glib2-devel zlib-devel&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configure-and-build-qemu-ga-msi-package&#34;&gt;configure and build qemu-ga msi package&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./configure --cross-prefix=x86_64-w64-mingw32-  \
--enable-guest-agent \
--enable-guest-agent-msi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make msi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a while, get the msi package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;[root@localhost qemu-2.8.1]# ls -l *msi
-rw-r--r-- 1 root root 1711104 Apr  5 11:09 qemu-ga-x86_64.msi
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Build Cross GCC Toolchain (TARGET:x86_64)</title>
      <link>https://daveixiang.github.io/articles/2017_04_01_build_cross_gcc_toolchain_x86_64/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_01_build_cross_gcc_toolchain_x86_64/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export BASE_DIR=/src/cross/
export LOG_DIR=$BASE_DIR/log
export SRC_DIR=$BASE_DIR/src
export BUILD_DIR=$BASE_DIR/build
export INSTALL_DIR=$BASE_DIR/x86_64
export SYSROOT_DIR=$INSTALL_DIR/sysroot

export TARGET_MACH=x86_64-linux-gnu
export LINUX_ARCH=x86_64
export BUILD_MACH=$(gcc -dumpmachine)

export binutils_version=binutils-2.27
export kernel_version=linux-4.4.51
export gcc_version=gcc-5.4.0
export glibc_version=glibc-2.25

export BINUTILS_SRC=$SRC_DIR/$binutils_version
export KERNEL_SRC=$SRC_DIR/$kernel_version
export GCC_SRC=$SRC_DIR/$gcc_version
export GLIBC_SRC=$SRC_DIR/$glibc_version

wrap_cmd() {
    stage=$1; shift
    LOGFILE=&amp;quot;$LOG_DIR/$stage.log&amp;quot;
    rm -rf &amp;quot;$LOGFILE&amp;quot;
    echo &amp;quot;begin $stage&amp;quot;
    for cmd in &amp;quot;$@&amp;quot;
    do
    echo &amp;quot;begin $cmd&amp;quot;
    eval &amp;quot;$cmd &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&amp;amp;1&amp;quot;
    [ $? -ne 0 ] &amp;amp;&amp;amp; echo &amp;quot;error&amp;quot; &amp;amp;&amp;amp; exit 1
    echo &amp;quot;end $cmd&amp;quot;
    done
    echo &amp;quot;end $stage&amp;quot;
}

rm -rf $BUILD_DIR
mkdir -p $BUILD_DIR

mkdir -p $SRC_DIR $LOG_DIR

# wrap_cmd &amp;quot;00.download_packages&amp;quot; \
#     &amp;quot;cd $SRC_DIR&amp;quot; \
#     &amp;quot;wget https://mirrors4.tuna.tsinghua.edu.cn/gnu/binutils/$binutils_version.tar.bz2&amp;quot; \
#     &amp;quot;wget https://mirrors4.tuna.tsinghua.edu.cn/gnu/gcc/$gcc_version/$gcc_version.tar.bz2&amp;quot; \
#     &amp;quot;wget https://mirrors4.tuna.tsinghua.edu.cn/gnu/glibc/$glibc_version.tar.bz2&amp;quot; \
#     &amp;quot;wget https://mirrors4.tuna.tsinghua.edu.cn/kernel/v4.x/$kernel_version.tar.gz&amp;quot; 

wrap_cmd &amp;quot;01.binutils_extract&amp;quot; \
     &amp;quot;rm -rf $BINUTILS_SRC&amp;quot; \
     &amp;quot;tar jxf $BINUTILS_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;mkdir -p $BUILD_DIR/binutils&amp;quot;

wrap_cmd &amp;quot;02.binutils_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/binutils&amp;quot; \
     &amp;quot;$BINUTILS_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --target=$TARGET_MACH --with-sysroot=$SYSROOT_DIR --disable-werror&amp;quot;

wrap_cmd &amp;quot;03.binutils_build&amp;quot; \
     &amp;quot;cd $BUILD_DIR/binutils&amp;quot; \
     &amp;quot;make -j$(nproc)&amp;quot; &amp;quot;make install&amp;quot;

wrap_cmd &amp;quot;04.linux_extract&amp;quot; \
     &amp;quot;rm -rf $KERNEL_SRC&amp;quot; \
     &amp;quot;tar zxf $KERNEL_SRC.tar.gz -C $SRC_DIR/&amp;quot;

wrap_cmd &amp;quot;05.linux_header_install&amp;quot; &amp;quot;cd $KERNEL_SRC&amp;quot; &amp;quot;make mrproper&amp;quot; &amp;quot;make ARCH=$LINUX_ARCH INSTALL_HDR_PATH=$SYSROOT_DIR/usr headers_install&amp;quot;

wrap_cmd &amp;quot;06.gcc_extract&amp;quot; \
     &amp;quot;rm -rf $GCC_SRC&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/bootstrap-gcc&amp;quot; \
     &amp;quot;tar jxf $GCC_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;sed -i -e &#39;/k prot/agcc_cv_libc_provides_ssp=yes&#39; $GCC_SRC/gcc/configure&amp;quot; \
     &amp;quot;mkdir $BUILD_DIR/bootstrap-gcc&amp;quot;

wrap_cmd &amp;quot;07.gcc_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/bootstrap-gcc&amp;quot; \
     &amp;quot;$GCC_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --host=$BUILD_MACH --target=$TARGET_MACH --without-headers --enable-boostrap --enable-languages=&#39;c&#39; --disable-threads --enable-__cxa_atexit --disable-libmudflap --with-gnu-ld --with-gnu-as --disable-libssp --disable-libgomp --disable-nls --disable-shared&amp;quot;

wrap_cmd &amp;quot;08.gcc_build&amp;quot; \
     &amp;quot;make -j$(nproc) all-gcc&amp;quot; \
     &amp;quot;make install-gcc&amp;quot; \
     &amp;quot;make -j$(nproc) all-target-libgcc&amp;quot; \
     &amp;quot;make install-target-libgcc&amp;quot;


wrap_cmd &amp;quot;09.glibc_extract&amp;quot; \
     &amp;quot;rm -rf $GLIBC_SRC&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/libc&amp;quot; \
     &amp;quot;tar jxf $GLIBC_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;mkdir -pv $BUILD_DIR/libc&amp;quot;

wrap_cmd &amp;quot;10.glibc_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/libc&amp;quot; \
     &amp;quot;echo &#39;libc_cv_forced_unwind=yes&#39; &amp;gt; config.cache&amp;quot; &amp;quot;echo &#39;libc_cv_c_cleanup=yes&#39; &amp;gt;&amp;gt; config.cache&amp;quot; \
     &amp;quot;export PATH=$INSTALL_DIR/bin:$PATH&amp;quot; &amp;quot;export CC=${TARGET_MACH}-gcc&amp;quot; &amp;quot;export LD=${CROSS}-ld&amp;quot; &amp;quot;export AS=${TARGET_MACH}-as&amp;quot; \
     &amp;quot;$GLIBC_SRC/configure --prefix=/usr --build=$BUILD_MACH --host=$TARGET_MACH --with-headers=$SYSROOT_DIR/usr/include --config-cache --enable-kernel=2.6.32&amp;quot;

wrap_cmd &amp;quot;11.glibc_build&amp;quot; \
     &amp;quot;make -k install-headers cross_compiling=yes install_root=$SYSROOT_DIR&amp;quot; \
     &amp;quot;make -j$(nproc)&amp;quot; \
     &amp;quot;make install_root=$SYSROOT_DIR install&amp;quot; \
     &amp;quot;ln -sf $SYSROOT_DIR/lib64 $SYSROOT_DIR/lib&amp;quot; \
     &amp;quot;ln -sf $SYSROOT_DIR/usr/lib64 $SYSROOT_DIR/usr/lib&amp;quot; \
     &amp;quot;unset CC&amp;quot; &amp;quot;unset LD&amp;quot; &amp;quot;unset AS&amp;quot;

wrap_cmd &amp;quot;12.gcc-final-01_extract&amp;quot; \
     &amp;quot;rm -rf $GCC_SRC&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/final-gcc-01&amp;quot; \
     &amp;quot;tar jxf $GCC_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;mkdir -pv $BUILD_DIR/final-gcc-01&amp;quot;

wrap_cmd &amp;quot;13.gcc-final-01_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/final-gcc-01&amp;quot; \
     &amp;quot;echo &#39;libc_cv_forced_unwind=yes&#39; &amp;gt; config.cache&amp;quot; &amp;quot;echo &#39;libc_cv_c_cleanup=yes&#39; &amp;gt;&amp;gt; config.cache&amp;quot; \
     &amp;quot;$GCC_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --target=$TARGET_MACH --with-sysroot=$SYSROOT_DIR --enable-languages=&#39;c,c++&#39; --with-gnu-as --with-gnu-ld --disable-multilib --disable-nls --enable-threads=posix --enable-long-longx&amp;quot;

wrap_cmd &amp;quot;14.gcc-final-01_build&amp;quot; \
     &amp;quot;make -j$(nproc) all-gcc&amp;quot; \
     &amp;quot;make install-gcc&amp;quot;


wrap_cmd &amp;quot;13.gcc-final-02_extract&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/final-gcc-02&amp;quot; \
     &amp;quot;mkdir -pv $BUILD_DIR/final-gcc-02&amp;quot;

wrap_cmd &amp;quot;14.gcc-final-02_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/final-gcc-02&amp;quot; \
     &amp;quot;echo &#39;libc_cv_forced_unwind=yes&#39; &amp;gt; config.cache&amp;quot; &amp;quot;echo &#39;libc_cv_c_cleanup=yes&#39; &amp;gt;&amp;gt; config.cache&amp;quot; \
     &amp;quot;$GCC_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --target=$TARGET_MACH --with-sysroot=$SYSROOT_DIR --enable-languages=&#39;c,c++&#39; --with-gnu-as --with-gnu-ld --disable-multilib --disable-nls --enable-threads=posix --disable-libssp --enable-long-longx --with-shared&amp;quot;


wrap_cmd &amp;quot;15.gcc-final-02_build&amp;quot; \
     &amp;quot;make -j$(nproc)&amp;quot; \
     &amp;quot;make install&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Build minimal linux hack env with busybox (Target: x86_64)</title>
      <link>https://daveixiang.github.io/articles/2017_04_01_build_minimal_linux_hack_env_with_busybox_x86_64/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_01_build_minimal_linux_hack_env_with_busybox_x86_64/</guid>
      <description>

&lt;h2 id=&#34;build-the-kernel&#34;&gt;Build the kernel&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use x86_64 default configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- defconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Simplify x86_64 configuration by cutting unused drivers&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- menuconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Create Image&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- -j8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-busybox&#34;&gt;Build busybox&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use busybox default configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- defconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Customize configurations&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- menuconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Busybox Settings  ---&amp;gt;
  --- Build Options
  [*]   Build BusyBox as a position independent executable
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Create busybox&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- -j$(nproc)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Install busybox(default path: BUSYBOX/_install)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generate-minimal-initramfs&#34;&gt;Generate minimal initramfs&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/bash
ROOTFS=rootfs
BUSYBOX=$(find busybox* -maxdepth 0 -type d)
SYSROOT=$(x86_64-linux-gnu-gcc --print-sysroot)
DYNAMIC_LIB_PATH_32=${SYSROOT}/lib
DYNAMIC_LIB_PATH_64=${SYSROOT}/lib64

rm -rf $ROOTFS
mkdir -p ${ROOTFS}/{proc,sys,dev,etc,etc/init.d,lib,lib64,mnt}

cat &amp;gt; $ROOTFS/etc/init.d/rcS &amp;lt;&amp;lt;EOF
#!/bin/sh
mount -t proc none /proc
mount -t sysfs none /sys
/sbin/mdev -s
ifconfig lo up
EOF

chmod +x $ROOTFS/etc/init.d/rcS

cat &amp;gt; $ROOTFS/etc/inittab &amp;lt;&amp;lt;EOF
# /etc/inittab
::sysinit:/etc/init.d/rcS
::askfirst:-/bin/sh
::ctrlaltdel:/sbin/reboot
::shutdown:/bin/umount -a -r
EOF

chmod +x $ROOTFS/etc/inittab

cp -rP ${BUSYBOX}/_install/* ${ROOTFS}

cp -rP ${DYNAMIC_LIB_PATH_64}/libc-2.25.so ${ROOTFS}/lib64/
cp -rP ${DYNAMIC_LIB_PATH_64}/libc.so.6 ${ROOTFS}/lib64/
cp -rP ${DYNAMIC_LIB_PATH_64}/libm-2.25.so ${ROOTFS}/lib64/
cp -rP ${DYNAMIC_LIB_PATH_64}/libm.so.6 ${ROOTFS}/lib64/
cp -rP ${DYNAMIC_LIB_PATH_64}/ld-2.25.so ${ROOTFS}/lib64/
cp -rP ${DYNAMIC_LIB_PATH_64}/ld-linux-x86-64.so.2 ${ROOTFS}/lib64/

cd ${ROOTFS}
ln -sf bin/busybox init
find . | cpio -o --format=newc &amp;gt; ../initramfs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-the-kernel-and-initramfs-just-built&#34;&gt;Test the kernel and initramfs just built&lt;/h2&gt;

&lt;p&gt;Use qemu to test the Image and initramfs which we just builded:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;qemu-system-x86_64  -nographic \
-kernel ./bzImage -initrd ./initramfs -append  &amp;quot;console=ttyS0 quiet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the output just like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Please press Enter to activate this console. 
/ # ls
bin      etc      lib      linuxrc  proc     sbin     usr
dev      init     lib64    mnt      root     sys
/ #
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Add OpenSuse Leap 42.2 repos</title>
      <link>https://daveixiang.github.io/articles/2017_03_31_opensuse_add_repos/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_03_31_opensuse_add_repos/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Remove previous repos&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zypper repos | grep Yes | cut -f3 -d &#39;|&#39; | sed -e &amp;quot;s/ //&amp;quot; | awk &#39;{print &amp;quot;zypper rr &amp;quot; $1}&#39; | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Add the repos and refresh&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zypper addrepo -f http://mirrors4.tuna.tsinghua.edu.cn/opensuse/distribution/leap/42.2/repo/oss/ openSUSE-leap-42.2-Oss
zypper addrepo -f http://mirrors4.tuna.tsinghua.edu.cn/opensuse/distribution/leap/42.2/repo/non-oss/ openSUSE-leap-42.2-Non-Oss
zypper addrepo -f http://mirrors4.tuna.tsinghua.edu.cn/opensuse/update/leap/42.2/oss openSUSE-leap-42.2-Update-Oss
zypper addrepo -f http://mirrors4.tuna.tsinghua.edu.cn/opensuse/update/leap/42.2/non-oss/ openSUSE-leap-42.2-Update-Non-Oss

zypper refresh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GCC and Glibc core runtime files</title>
      <link>https://daveixiang.github.io/articles/2017_03_31_gcc_glibc_core_runtime_files/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_03_31_gcc_glibc_core_runtime_files/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Files provided by glibc&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;file&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crt0.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Older style of the initial runtime code. No one generates this anymore.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crt1.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Newer style of the initial runtime code. Contains the _start symbol which sets up the env with argc/argv/libc _init/libc _fini before jumping to the libc main. glibc calls this file &amp;lsquo;start.S&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crti.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Defines the function prolog; _init in the .init section and _fini in the .fini section. glibc calls this &amp;lsquo;initfini.c&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtn.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Defines the function epilog. glibc calls this &amp;lsquo;initfini.c&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Scrt1.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crt1.o when generating PIEs.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gcrt1.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crt1.o when generating code with profiling information. Compile with -pg. Produces output suitable for the gprof util.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Mcrt1.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Like gcrt1.o, but is used with the prof utility. glibc installs this as a dummy file as it&amp;rsquo;s useless on linux systems.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Files provides by gcc&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;file&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtbegin.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;GCC uses this to find the start of the constructors.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtbeginS.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crtbegin.o when generating shared objects/PIEs.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtbeginT.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crtbegin.o when generating static executables.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtend.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;GCC uses this to find the start of the destructors.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtendS.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crtend.o when generating shared objects/PIEs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Netlink hello world example</title>
      <link>https://daveixiang.github.io/articles/2017_03_31_netlink_hello_world_example/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_03_31_netlink_hello_world_example/</guid>
      <description>

&lt;h2 id=&#34;demo-kernel-code&#34;&gt;demo kernel code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;hello_nl_kern.c&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;net/sock.h&amp;gt;
#include &amp;lt;linux/netlink.h&amp;gt;
#include &amp;lt;linux/skbuff.h&amp;gt;

#define NETLINK_USER 31

struct sock *nl_sk = NULL;

static void hello_nl_recv_msg(struct sk_buff *skb)
{
        struct nlmsghdr *nlh;
        int pid;
        struct sk_buff *skb_out;
        int msg_size;
        char *msg = &amp;quot;Hello from kernel&amp;quot;;
        int res;
        printk(KERN_INFO &amp;quot;Entering: %s\n&amp;quot;, __FUNCTION__);

        msg_size = strlen(msg);
        nlh = (struct nlmsghdr *)skb-&amp;gt;data;
        printk(KERN_INFO &amp;quot;Netlink received msg payload: %s\n&amp;quot;,(char*)nlmsg_data(nlh));
        pid = nlh-&amp;gt;nlmsg_pid;

        skb_out = nlmsg_new(msg_size,0);
        if (!skb_out)
        {
                printk(KERN_ERR &amp;quot;Failed to allocate new skb\n&amp;quot;);
                return;
        }

        nlh = nlmsg_put(skb_out, 0, 0, NLMSG_DONE, msg_size, 0);
        NETLINK_CB(skb_out).dst_group = 0;
        strncpy(nlmsg_data(nlh), msg,msg_size);

        res = nlmsg_unicast(nl_sk, skb_out, pid);
        if (res &amp;lt; 0)
                printk(KERN_INFO &amp;quot;Error while sending bak to user\n&amp;quot;);
}

static int __init hello_init(void)
{
        struct netlink_kernel_cfg cfg = {
                .input = hello_nl_recv_msg,
        };

        printk(&amp;quot;Entering: %s\n&amp;quot;, __FUNCTION__);

        nl_sk = netlink_kernel_create(&amp;amp;init_net, NETLINK_USER, &amp;amp;cfg);

        if (!nl_sk)
        {
                printk(KERN_ALERT &amp;quot;Error creating socket.\n&amp;quot;);
                return -10;
        }

        return 0;
}

static void __exit hello_exit(void)
{
        printk(KERN_INFO &amp;quot;exiting hello module\n&amp;quot;);
        netlink_kernel_release(nl_sk);
}

module_init(hello_init);
module_exit(hello_exit);

MODULE_LICENSE(&amp;quot;GPL&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;makefile&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;obj-m := hello_nl_kern.o

KERNEL_SOURCE := /lib/modules/$(shell uname -r)/build

PWD := $(shell pwd)

all:
        make -C $(KERNEL_SOURCE) SUBDIRS=${PWD} modules
clean:
        make -C $(KERNEL_SOURCE) SUBDIRS=${PWD} clean
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;demo-user-code&#34;&gt;demo user code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;hello_nl_user.c&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;linux/netlink.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

#define NETLINK_USER 31

#define MAX_PAYLOAD 1024 /* maximum payload size*/

struct sockaddr_nl src_addr, dest_addr;
struct nlmsghdr *nlh = NULL;
struct iovec iov;
int sock_fd;
struct msghdr msg;

int main(int argc, char *argv[])
{
        sock_fd = socket(PF_NETLINK, SOCK_RAW, NETLINK_USER);
        if (sock_fd &amp;lt; 0)
                return -1;

        memset(&amp;amp;src_addr, 0, sizeof(src_addr));
        src_addr.nl_family = AF_NETLINK;
        src_addr.nl_pid = getpid();

        bind(sock_fd, (struct sockaddr*)&amp;amp;src_addr, sizeof(src_addr));

        memset(&amp;amp;dest_addr, 0, sizeof(dest_addr));
        dest_addr.nl_family = AF_NETLINK;
        dest_addr.nl_pid = 0; /* For Linux Kernel */
        dest_addr.nl_groups = 0; /* unicast */

        nlh = (struct nlmsghdr *)malloc(NLMSG_SPACE(MAX_PAYLOAD));
        memset(nlh, 0, NLMSG_SPACE(MAX_PAYLOAD));
        nlh-&amp;gt;nlmsg_len = NLMSG_SPACE(MAX_PAYLOAD);
        nlh-&amp;gt;nlmsg_pid = getpid();
        nlh-&amp;gt;nlmsg_flags = 0;

        strcpy(NLMSG_DATA(nlh), &amp;quot;Hello&amp;quot;);

        iov.iov_base = (void *)nlh;
        iov.iov_len = nlh-&amp;gt;nlmsg_len;
        msg.msg_name = (void *)&amp;amp;dest_addr;
        msg.msg_namelen = sizeof(dest_addr);
        msg.msg_iov = &amp;amp;iov;
        msg.msg_iovlen = 1;

        /* Sending message to kernel */
        sendmsg(sock_fd,&amp;amp;msg,0);
        printf(&amp;quot;Waiting for message from kernel\n&amp;quot;);

        /* Read message from kernel */
        recvmsg(sock_fd, &amp;amp;msg, 0);
        printf(&amp;quot;Received message payload: %s\n&amp;quot;, (char *)NLMSG_DATA(nlh));
        close(sock_fd);

        return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Notation meaning in top out</title>
      <link>https://daveixiang.github.io/articles/2017_03_30_notation_meaning_in_top_out/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_03_30_notation_meaning_in_top_out/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;PID — Process Id&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The task’s unique process ID, which periodically wraps, though
never restarting at zero.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;PPID — Parent Process Pid&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The process ID of a task’s parent.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;RUSER — Real User Name&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The real user name of the task’s owner.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;UID — User Id&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The effective user ID of the task’s owner.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;USER — User Name&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The effective user name of the task’s owner.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;GROUP — Group Name&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The effective group name of the task’s owner.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;TTY — Controlling Tty&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The name of the controlling terminal. This is usually the
device (serial port, pty, etc.) from which the process was
started, and which it uses for input or output. However, a
task need not be associated with a terminal, in which case
you’ll see ‘?’ displayed.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;PR — Priority&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The priority of the task.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;NI — Nice value&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The nice value of the task. A negative nice value means higher
priority, whereas a positive nice value means lower priority.
Zero in this field simply means priority will not be adjusted
in determining a task’s dispatchability.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;P — Last used CPU (SMP)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;A number representing the last used processor. In a true SMP
environment this will likely change frequently since the kernel
intentionally uses weak affinity. Also, the very act of
running top may break this weak affinity and cause more
processes to change CPUs more often (because of the extra
demand for cpu time).
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;%CPU — CPU usage&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The task’s share of the elapsed CPU time since the last screen
update, expressed as a percentage of total CPU time. In a true
SMP environment, if ‘Irix mode’ is Off, top will operate in
‘Solaris mode’ where a task’s cpu usage will be divided by the
total number of CPUs. You toggle ‘Irix/Solaris’ modes with the
‘I’ interactive command.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;TIME — CPU Time&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Total CPU time the task has used since it started. When
‘Cumulative mode’ is On, each process is listed with the cpu
time that it and its dead children has used. You toggle
‘Cumulative mode’ with ‘S’, which is a command-line option and
an interactive command. See the ‘S’ interactive command for
additional information regarding this mode.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;TIME+ — CPU Time, hundredths&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The same as ‘TIME’, but reflecting more granularity through
hundredths of a second.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;%MEM — Memory usage (RES)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;A task’s currently used share of available physical memory.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;VIRT — Virtual Image (kb)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The total amount of virtual memory used by the task. It
includes all code, data and shared libraries plus pages that
have been swapped out and pages that have been mapped but not
used.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;SWAP — Swapped size (kb)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Memory that is not resident but is present in a task. This is
memory that has been swapped out but could include additional
non-resident memory. This column is calculated by subtracting
physical memory from virtual memory.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;RES — Resident size (kb)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The non-swapped physical memory a task has used.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;CODE — Code size (kb)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The amount of virtual memory devoted to executable code, also
known as the ‘text resident set’ size or TRS.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;DATA — Data+Stack size (kb)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The amount of virtual memory devoted to other than executable
code, also known as the ‘data resident set’ size or DRS.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;SHR — Shared Mem size (kb)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The amount of shared memory used by a task. It simply reflects
memory that could be potentially shared with other processes.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;nFLT — Page Fault count&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The number of major page faults that have occurred for a task.
A page fault occurs when a process attempts to read from or
write to a virtual page that is not currently present in its
address space. A major page fault is when backing storage
access (such as a disk) is involved in making that page
available.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;nDRT — Dirty Pages count&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The number of pages that have been modified since they were
last written to disk. Dirty pages must be written to disk
before the corresponding physical memory location can be used
for some other virtual page.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;S — Process Status&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The status of the task which can be one of:
‘D’ = uninterruptible sleep
‘R’ = running
‘S’ = sleeping
‘T’ = traced or stopped
‘Z’ = zombie
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Configure libvirt with openvswitch bridge</title>
      <link>https://daveixiang.github.io/articles/2017_03_23_configure_libvirt_with_openvswitch_bridge/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_03_23_configure_libvirt_with_openvswitch_bridge/</guid>
      <description>

&lt;h1 id=&#34;create-openvswitch-bridge&#34;&gt;Create OpenvSwitch bridge&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ovs-vsctl add-br br0
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configure-libvirt-with-br0-just-created&#34;&gt;Configure libvirt with &lt;em&gt;br0&lt;/em&gt; just created&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BRNAME=br0

cat &amp;gt; /tmp/libvirt-net.xml &amp;lt;&amp;lt;EOF
&amp;lt;network&amp;gt;
  &amp;lt;name&amp;gt;${BRNAME}&amp;lt;/name&amp;gt;
  &amp;lt;forward mode=&#39;bridge&#39;/&amp;gt;
  &amp;lt;bridge name=&#39;${BRNAME}&#39;/&amp;gt;
  &amp;lt;virtualport type=&#39;openvswitch&#39;/&amp;gt;
&amp;lt;/network&amp;gt;
EOF

virsh net-define /tmp/libvirt-net.xml
virsh net-start $BRNAME
virsh net-autostart $BRNAME
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to get the complete and exact list of mounted filesystems in Linux?</title>
      <link>https://daveixiang.github.io/articles/2017_03_22_get_the_complete_and_exact_list_of_mounted_filesystems_in_linux/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_03_22_get_the_complete_and_exact_list_of_mounted_filesystems_in_linux/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;findmnt -lo source,target,fstype,label,options,used -t xfs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;SOURCE    TARGET FSTYPE LABEL OPTIONS
/dev/vda1 /      xfs          rw,relatime,attr2,inode64,noquota
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;/proc/mounts

/etc/mtab
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>