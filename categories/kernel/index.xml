<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel on 項 思 偉 ~ Aal Izz Well!</title>
    <link>https://siweixiang.github.io/categories/kernel/</link>
    <description>Recent content in Kernel on 項 思 偉 ~ Aal Izz Well!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://siweixiang.github.io/categories/kernel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build minimal linux hack env with busybox (Target: vexpress-a15)</title>
      <link>https://siweixiang.github.io/articles/2017_07_17_build_minimal_linux_hack_env_with_busybox_vexpress_a15/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://siweixiang.github.io/articles/2017_07_17_build_minimal_linux_hack_env_with_busybox_vexpress_a15/</guid>
      <description>Build the kernel Use vexpress-a15 default configuration
ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- make vexpress_defconfig  Simplify vexpress-a15 configuration by cutting unused drivers
ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- make menuconfig  Create zImage
ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- make -j$(nproc)  Build busybox Use busybox default configuration
ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- make defconfig  Customize configurations
ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- make menuconfig  Create busybox
ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- make -j$(nproc)  Install busybox(default path: BUSYBOX/_install)
ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- make install  Generate minimal initramfs #!/usr/bin/bash ROOTFS=rootfs BUSYBOX=$(find busybox* -maxdepth 0 -type d) SYSROOT=$(arm-none-linux-gnueabi-gcc --print-sysroot) GLIBC_VERSION=$(${SYSROOT}/usr/bin/ldd --version | head -1 | cut -d&#39; &#39; -f4) DYNAMIC_LIB_PATH=${SYSROOT}/lib rm -rf $ROOTFS mkdir -p ${ROOTFS}/{proc,sys,dev,etc,etc/init.</description>
    </item>
    
    <item>
      <title>Build minimal linux hack env with busybox (Target: i686)</title>
      <link>https://siweixiang.github.io/articles/2017_07_06_build_minimal_linux_hack_env_with_busybox_i686/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://siweixiang.github.io/articles/2017_07_06_build_minimal_linux_hack_env_with_busybox_i686/</guid>
      <description>Build the kernel Use i686 default configuration
ARCH=i386 CROSS_COMPILE=i686-none-linux-gnu- make defconfig  Simplify vexpress-a15 configuration by cutting unused drivers
ARCH=i386 CROSS_COMPILE=i686-none-linux-gnu- make menuconfig  Create bzImage
ARCH=i386 CROSS_COMPILE=i686-none-linux-gnu- make -j$(nproc)  Build busybox Use busybox default configuration
ARCH=i386 CROSS_COMPILE=i686-none-linux-gnu- make defconfig  Customize configurations
ARCH=i386 CROSS_COMPILE=i686-none-linux-gnu- make menuconfig  Create busybox
ARCH=i386 CROSS_COMPILE=i686-none-linux-gnu- make -j$(nproc)  Install busybox(default path: BUSYBOX/_install)
ARCH=i386 CROSS_COMPILE=i686-none-linux-gnu- make install  Generate minimal initramfs #!/usr/bin/bash ROOTFS=rootfs BUSYBOX=$(find busybox* -maxdepth 0 -type d) SYSROOT=$(i686-none-linux-gnu-gcc --print-sysroot) GLIBC_VERSION=$(${SYSROOT}/usr/bin/ldd --version | head -1 | cut -d&#39; &#39; -f4) DYNAMIC_LIB_PATH=${SYSROOT}/lib rm -rf $ROOTFS mkdir -p ${ROOTFS}/{proc,sys,dev,etc,etc/init.</description>
    </item>
    
    <item>
      <title>Build minimal linux hack env with busybox (Target: x86_64)</title>
      <link>https://siweixiang.github.io/articles/2017_04_01_build_minimal_linux_hack_env_with_busybox_x86_64/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://siweixiang.github.io/articles/2017_04_01_build_minimal_linux_hack_env_with_busybox_x86_64/</guid>
      <description>Build the kernel Use x86_64 default configuration
ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- make defconfig  Simplify x86_64 configuration by cutting unused drivers
ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- make menuconfig  Create kernel image
ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- make -j8  Build busybox Use busybox default configuration
ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- make defconfig  Customize busybox configurations
ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- make menuconfig  Busybox Settings ---&amp;gt; --- Build Options [*] Build BusyBox as a position independent executable  Compile busybox
ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- make -j$(nproc)  Install busybox(default path: BUSYBOX/_install)</description>
    </item>
    
    <item>
      <title>Netlink hello world example</title>
      <link>https://siweixiang.github.io/articles/2017_03_31_netlink_hello_world_example/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://siweixiang.github.io/articles/2017_03_31_netlink_hello_world_example/</guid>
      <description>demo kernel code  hello_nl_kern.c  #include &amp;lt;linux/module.h&amp;gt; #include &amp;lt;net/sock.h&amp;gt; #include &amp;lt;linux/netlink.h&amp;gt; #include &amp;lt;linux/skbuff.h&amp;gt; #define NETLINK_USER 31 struct sock *nl_sk = NULL; static void hello_nl_recv_msg(struct sk_buff *skb) { struct nlmsghdr *nlh; int pid; struct sk_buff *skb_out; int msg_size; char *msg = &amp;quot;Hello from kernel&amp;quot;; int res; printk(KERN_INFO &amp;quot;Entering: %s\n&amp;quot;, __FUNCTION__); msg_size = strlen(msg); nlh = (struct nlmsghdr *)skb-&amp;gt;data; printk(KERN_INFO &amp;quot;Netlink received msg payload: %s\n&amp;quot;,(char*)nlmsg_data(nlh)); pid = nlh-&amp;gt;nlmsg_pid; skb_out = nlmsg_new(msg_size,0); if (!</description>
    </item>
    
    <item>
      <title>Build minimal linux hack env with busybox (Target: arm64)</title>
      <link>https://siweixiang.github.io/articles/2017_02_25_build_minimal_linux_hack_env_with_busybox_arm64/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://siweixiang.github.io/articles/2017_02_25_build_minimal_linux_hack_env_with_busybox_arm64/</guid>
      <description>Build the kernel Use arm64 default configuration
ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- make defconfig  Simplify arm64 configuration by cutting unused drivers
ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- make menuconfig  Create Image
ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- make -j8  Build busybox Use busybox default configuration
ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- make defconfig  Customize configurations
ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- make menuconfig  Busybox Settings ---&amp;gt; --- Build Options [*] Build BusyBox as a position independent executable  Create busybox
ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- make -j$(nproc)  Install busybox(default path: BUSYBOX/_install)</description>
    </item>
    
    <item>
      <title>Using OpenvSwitch to build minimal linux networking hack environment</title>
      <link>https://siweixiang.github.io/articles/2017_02_25_using_openvswitch_to_build_minimal_linux_networking_hack_env/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://siweixiang.github.io/articles/2017_02_25_using_openvswitch_to_build_minimal_linux_networking_hack_env/</guid>
      <description>Create Openvswitch bridge and two tap devices for vm ip tuntap add name tap01 mode tap ip tuntap add name tap02 mode tap ip link set tap01 up ip link set tap02 up ip link set tap01 address 12:34:56:78:9a:01 ip link set tap01 address 12:34:56:78:9a:02 ovs-vsctl add-br br0 ovs-vsctl add-port br0 tap01 ovs-vsctl add-port br0 tap02  Start the two vms and config network configure vm01  start vm01  qemu-system-x86_64 -m 2048M -enable-kvm \ -nographic \ -kernel .</description>
    </item>
    
  </channel>
</rss>