<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qemu on 項 思 偉 ~ Aal Izz Well!</title>
    <link>https://daveixiang.github.io/categories/qemu/index.xml</link>
    <description>Recent content in Qemu on 項 思 偉 ~ Aal Izz Well!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="https://daveixiang.github.io/categories/qemu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>linux pci device driver using mmio demo</title>
      <link>https://daveixiang.github.io/articles/2017_04_25_linux_pci_device_driver_using_mmio_demo/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_25_linux_pci_device_driver_using_mmio_demo/</guid>
      <description>

&lt;p&gt;The pci driver is written to drive the qemu pci-helloworld device&lt;/p&gt;

&lt;h1 id=&#34;pci-helloworld-driver-source-code&#34;&gt;&lt;em&gt;pci-helloworld&lt;/em&gt; driver source code&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;the driver code &lt;em&gt;pci-helloworld&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;linux/init.h&amp;gt;
#include &amp;lt;linux/kernel.h&amp;gt;
#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;linux/pci.h&amp;gt;
#include &amp;lt;linux/printk.h&amp;gt;
#include &amp;lt;linux/proc_fs.h&amp;gt;
#include &amp;lt;linux/seq_file.h&amp;gt;

MODULE_LICENSE(&amp;quot;GPL&amp;quot;);

static struct pci_dev *_pdev;
static void __iomem *_mmio;

static const struct pci_device_id pcidevtbl[] = {

        { 0x6688, 0x0001, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 },
        { } /* terminate */

};

void pci_helloworld_reset_pointer(void __iomem *mmio)
{
        iowrite8(1, mmio + 1);
}

void pci_helloworld_set_buf_len(void __iomem *mmio, uint8_t len)
{
        iowrite8(len, mmio + 2);
}

void pci_helloworld_write_char(void __iomem *mmio, char c)
{
        iowrite8(c, mmio + 0);
}

static int pci_helloworld_show(struct seq_file *m, void *v) {
        int i, len;
        char *buf;

        if (!_mmio) {
                pr_emerg(&amp;quot;pci_iomap failed!\n&amp;quot;);
                return -ENODEV;
        }

        pci_helloworld_reset_pointer(_mmio);

        len = ioread8(_mmio + 1);
        if (len) {
                buf = kmalloc(len + 1, GFP_KERNEL);
                if (!buf)
                        return -ENOMEM;
        } else {
                buf = &amp;quot;&amp;quot;;
        }

        for (i = 0; i &amp;lt; len; i++)
                buf[i] = ioread8(_mmio);

        seq_printf(m, &amp;quot;%s&amp;quot;, buf);

        return 0;
}

static int pci_helloworld_open(struct inode *inode, struct file *file) {
        return single_open(file, pci_helloworld_show, NULL);
}

ssize_t pci_helloworld_write (struct file *file, const char __user *buf, size_t len,
                        loff_t *l)
{
        int i = 0;

        if (!_mmio) {
                pr_emerg(&amp;quot;failed to pci_iomap\n&amp;quot;);
                return 0;
        }

        pci_helloworld_reset_pointer(_mmio);
        pci_helloworld_set_buf_len(_mmio, len + 1);

        for(i = 0; i &amp;lt; len; i ++)
                pci_helloworld_write_char(_mmio, buf[i]);

        return i;
}

static const struct file_operations proc_fops = {
        .owner = THIS_MODULE,
        .open = pci_helloworld_open,
        .read = seq_read,
        .write = pci_helloworld_write,
        .llseek = seq_lseek,
        .release = single_release,
};

static int pci_helloworld_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
{
        void __iomem *mmio;
        char *buf;
        int len, i;
        struct proc_dir_entry *proc_entry;

        pr_debug(&amp;quot;probed pci dev, trying read.\n&amp;quot;);

        mmio = pci_iomap(pdev, 0, 0);
        if (!mmio) {
                pr_emerg(&amp;quot;failed to iomap!\n&amp;quot;);
                return -ENODEV;
        }

        len = ioread8(mmio + 1);
        pr_info(&amp;quot;length of string: %d bytes\n&amp;quot;, len);

        buf = kmalloc(len + 1, GFP_KERNEL);
        if (!buf) {
                pr_err(&amp;quot;no memory...\n&amp;quot;);
                return -ENOMEM;
        }

        for (i = 0; i &amp;lt; len; i++)
                buf[i] = ioread8(mmio);

        pr_info(&amp;quot;read this string: %s&amp;quot;, buf);

        proc_entry = proc_create(&amp;quot;helloworld&amp;quot;, 0755, NULL, &amp;amp;proc_fops);

        _mmio = mmio;
        _pdev = pdev;
        return 0;
}

static void pci_helloworld_remove(struct pci_dev *pdev) {
        pr_debug(&amp;quot;unloaded device\n&amp;quot;);
}

static struct pci_driver helloworld_pci_driver = {
        .name = &amp;quot;PCI-Hello-World driver&amp;quot;,
        .id_table = pcidevtbl,
        .probe = pci_helloworld_probe,
        .remove = pci_helloworld_remove,

};

static int __init pci_helloworld_init(void)
{
        int rc;
        pr_debug(&amp;quot;pci device driver online.\n&amp;quot;);

        rc = pci_register_driver(&amp;amp;helloworld_pci_driver);
        if (rc) {
                pr_err(&amp;quot;failed to register driver.\n&amp;quot;);
                return rc;
        }

        return 0;
}

static void __exit pci_helloworld_exit(void)
{
        pr_debug(&amp;quot;driver unloaded :-(\n&amp;quot;);
        return;
}

module_init(pci_helloworld_init);
module_exit(pci_helloworld_exit);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;the makefile&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;obj-m := pci-helloworld.o

ifeq ($(KERNELRELEASE),)  

KERNELDIR ?= /lib/modules/$(shell uname -r)/build 
PWD := $(shell pwd)  

all:
        $(MAKE) -C $(KERNELDIR) M=$(PWD) modules  
clean:
        $(MAKE) -C $(KERNELDIR) M=$(PWD) clean
else  

$(info Building with KERNELRELEASE = ${KERNELRELEASE})  

endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;load-the-module-and-test&#34;&gt;Load the module and test&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Load the module&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;insmod pci-helloworld.ko
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Test the module&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /proc/helloworld # Hello, world!

echo &amp;quot;davei&amp;quot; &amp;gt; /proc/hellworld

cat /proc/helloworld # davei
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>qemu pci device demo</title>
      <link>https://daveixiang.github.io/articles/2017_04_25_qemu_pci_device_demo/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_25_qemu_pci_device_demo/</guid>
      <description>

&lt;h2 id=&#34;add-the-device-source-code-qemu-src-hw-misc-pci-helloworld-c&#34;&gt;Add the device source code &lt;em&gt;{QEMU_SRC}/hw/misc/pci-helloworld.c&lt;/em&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;quot;qemu/osdep.h&amp;quot;
#include &amp;quot;hw/hw.h&amp;quot;
#include &amp;quot;hw/pci/pci.h&amp;quot;
#include &amp;quot;qemu/event_notifier.h&amp;quot;

typedef struct PCIHelloWorldDevState {
    PCIDevice parent_obj;

    int pos;
    char *buf;
    int buflen;

    MemoryRegion mmio;
} PCIHelloWorldDevState;

#define TYPE_PCI_HELLOWORLD_DEV &amp;quot;pci-helloworld&amp;quot;

#define PCI_HELLOWORLD_DEV(obj) \
    OBJECT_CHECK(PCIHelloWorldDevState, (obj), TYPE_PCI_HELLOWORLD_DEV)

static uint64_t
pci_helloworld_dev_mmio_read(void *opaque, hwaddr addr, unsigned size)
{
    PCIHelloWorldDevState *d = opaque;

    if (addr == 0)
        return d-&amp;gt;buf[d-&amp;gt;pos ++];
    else
        return d-&amp;gt;buflen;
}

static void
pci_helloworld_dev_mmio_write(void *opaque, hwaddr addr, uint64_t val,
                       unsigned size)
{

   PCIHelloWorldDevState *d = opaque;

   switch(addr) {
       case 0:
           /* write byte */
           if (!d-&amp;gt;buf)
               break;
           if (d-&amp;gt;pos &amp;gt;= d-&amp;gt;buflen)
               break;
           d-&amp;gt;buf[d-&amp;gt;pos ++] = (uint8_t)val;
           break;
       case 1:
           /* reset pos */
           d-&amp;gt;pos = 0;
           break;
       case 2:
           /* set buffer length */
           d-&amp;gt;buflen = val + 1;
           g_free(d-&amp;gt;buf);
           d-&amp;gt;buf = g_malloc(d-&amp;gt;buflen);
           break;
   }

   return;
}

static const MemoryRegionOps pci_helloworld_dev_mmio_ops = {
    .read = pci_helloworld_dev_mmio_read,
    .write = pci_helloworld_dev_mmio_write,
    .endianness = DEVICE_LITTLE_ENDIAN,
    .impl = {
        .min_access_size = 1,
        .max_access_size = 1,
    },
};

static int
pci_helloworld_dev_init(PCIDevice *pci_dev)
{
    PCIHelloWorldDevState *d = PCI_HELLOWORLD_DEV(pci_dev);
    uint8_t *pci_conf;

    pci_conf = pci_dev-&amp;gt;config;

    pci_conf[PCI_INTERRUPT_PIN] = 0; /* no interrupt pin */

    memory_region_init_io(&amp;amp;d-&amp;gt;mmio, OBJECT(d), &amp;amp;pci_helloworld_dev_mmio_ops, d,
                          &amp;quot;pci-helloworld-dev-mmio&amp;quot;, 128);
    pci_register_bar(pci_dev, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &amp;amp;d-&amp;gt;mmio);

    d-&amp;gt;pos = 0;
    d-&amp;gt;buf = g_malloc(14);
    memcpy(d-&amp;gt;buf, &amp;quot;Hello, world!\n&amp;quot;, 14);
    d-&amp;gt;buflen = 14;
    printf(&amp;quot;Loaded helloworld pci\n&amp;quot;);

    return 0;
}

static void
pci_helloworld_dev_uninit(PCIDevice *dev)
{
    //PCIHelloWorldDevState *d = PCI_HELLOWORLD_DEV(dev);
    printf(&amp;quot;unloaded helloworld pci\n&amp;quot;);
}

static void
qdev_pci_helloworld_dev_reset(DeviceState *dev)
{
    //PCIHelloWorldDevState *d = PCI_HELLOWORLD_DEV(dev);
}

static void
pci_helloworld_dev_class_init(ObjectClass *klass, void *data)
{
    DeviceClass *dc = DEVICE_CLASS(klass);
    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);

    k-&amp;gt;init = pci_helloworld_dev_init;
    k-&amp;gt;exit = pci_helloworld_dev_uninit;
    k-&amp;gt;vendor_id = 0x6688;
    k-&amp;gt;device_id = 0x0001;
    k-&amp;gt;revision = 0x00;
    k-&amp;gt;class_id = PCI_CLASS_OTHERS;
    dc-&amp;gt;desc = &amp;quot;HelloWorld PCI&amp;quot;;
    set_bit(DEVICE_CATEGORY_MISC, dc-&amp;gt;categories);
    dc-&amp;gt;reset = qdev_pci_helloworld_dev_reset;
}

static const TypeInfo pci_helloworld_info = {
    .name          = TYPE_PCI_HELLOWORLD_DEV,
    .parent        = TYPE_PCI_DEVICE,
    .instance_size = sizeof(PCIHelloWorldDevState),
    .class_init    = pci_helloworld_dev_class_init,
};

static void pci_helloworld_register_types(void)
{
    type_register_static(&amp;amp;pci_helloworld_info);
}

type_init(pci_helloworld_register_types)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-the-following-line-to-qemu-src-hw-misc-makefile-objs&#34;&gt;Add the following line to &lt;em&gt;{QEMU_SRC}/hw/misc/Makefile.objs&lt;/em&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;ifeq ($(CONFIG_PCI), y)
obj-y += pci-helloworld.o
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;recompile-the-qemu-source-code-and-check-the-result&#34;&gt;Recompile the qemu source code and check the result&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;get the device list&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x86_64-softmmu/qemu-system-x86_64 -device ? 2&amp;gt;&amp;amp;1 | grep hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and we get the following result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;name &amp;quot;pci-helloworld&amp;quot;, bus PCI, desc &amp;quot;HelloWorld PCI&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;startup vm&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x86_64-softmmu/qemu-system-x86_64  -kernel ./bzImage -initrd ./initramfs -nographic -append  &amp;quot;console=ttyS0 quiet&amp;quot;  -device pci-helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;use &lt;code&gt;lspci&lt;/code&gt; to get pci info:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Loaded helloworld pci
[    0.869296] kvm: no hardware support

Please press Enter to activate this console.  
/ # lspci
00:00.0 Class 0600: 8086:1237
00:01.0 Class 0601: 8086:7000
00:01.1 Class 0101: 8086:7010
00:01.3 Class 0680: 8086:7113
00:02.0 Class 0300: 1234:1111
00:03.0 Class 0200: 8086:100e
00:04.0 Class 00ff: 6688:0001
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Multiple ways to access QEMU Machine Protocol (QMP)</title>
      <link>https://daveixiang.github.io/articles/2017_02_28_multiple_ways_to_access_qmp/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_02_28_multiple_ways_to_access_qmp/</guid>
      <description>

&lt;p&gt;QMP (QEMU Machine Protocol) is quiet useful. QMP allows applications
to communicate withh a running QEMU&amp;rsquo;s instance. There ae a few
different ways to access the QEMU monitor to query the guest&amp;rsquo;s
information, modify the guest state using the QMP commands.&lt;/p&gt;

&lt;h2 id=&#34;access-qmp-via-libvirt-s-qemu-monitor-command&#34;&gt;Access QMP via libvirt’s qemu-monitor-command&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;virsh qemu-monitor-command ${domain-name} --pretty &#39;{&amp;quot;execute&amp;quot;:&amp;quot;query-kvm&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;qmp-via-tcp-socket&#34;&gt;QMP via tcp socket&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;launch an qemu instance:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;qemu-system-x86_64 --enable-kvm -drive if=virtio,format=qcow2,index=0,file=cirros-0.3.5-x86_64-disk.img --qmp tcp:127.0.0.1:12345,server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the output in the terminal like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;QEMU waiting for connection on: disconnected:tcp:127.0.0.1:12345,serve
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;launch another terminal to access the instance we have&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;launched using telnet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;telnet 127.0.0.1 12345
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the output like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &#39;^]&#39;.
{&amp;quot;QMP&amp;quot;: {&amp;quot;version&amp;quot;: {&amp;quot;qemu&amp;quot;: {&amp;quot;micro&amp;quot;: 0, &amp;quot;minor&amp;quot;: 8, &amp;quot;major&amp;quot;: 2}, &amp;quot;package&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;capabilities&amp;quot;: []}}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;execute &amp;lsquo;query-kvm&amp;rsquo; command&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;{&amp;quot;execute&amp;quot; : &amp;quot;qmp_capabilities&amp;quot;}
{&amp;quot;return&amp;quot;: {}}
{&amp;quot;execute&amp;quot; : &amp;quot;query-kvm&amp;quot;}
{&amp;quot;return&amp;quot;: {&amp;quot;enabled&amp;quot;: true, &amp;quot;present&amp;quot;: true}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;qmp-via-unix-socket&#34;&gt;QMP via unix socket&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;launch an qemu instance with unix socket:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;qemu-system-x86_64 --enable-kvm -drive if=virtio,format=qcow2,index=0,file=cirros-0.3.5-x86_64-disk.img -qmp unix:./qmp-sock,server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the output in the terminal like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;QEMU waiting for connection on: disconnected:unix:./qmp-sock,server
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;access the instance we have launched using socat and rlwrap:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rlwrap socat UNIX-CONNECT:./qmp-sock STDIO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the output like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;{&amp;quot;QMP&amp;quot;: {&amp;quot;version&amp;quot;: {&amp;quot;qemu&amp;quot;: {&amp;quot;micro&amp;quot;: 0, &amp;quot;minor&amp;quot;: 8, &amp;quot;major&amp;quot;: 2}, &amp;quot;package&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;capabilities&amp;quot;: []}}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>