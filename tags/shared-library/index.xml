<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shared Library on 項 思 偉 (Davei) ~ Aal Izz Well!</title>
    <link>https://daveixiang.github.io/tags/shared-library/index.xml</link>
    <description>Recent content in Shared Library on 項 思 偉 (Davei) ~ Aal Izz Well!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="https://daveixiang.github.io/tags/shared-library/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Linux shared libraries</title>
      <link>https://daveixiang.github.io/articles/2016_04_02_linux_shared_libraries/</link>
      <pubDate>Sat, 02 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2016_04_02_linux_shared_libraries/</guid>
      <description>

&lt;p&gt;Shared libraries are collections of code that can be shared by
programs. Unlike static (aka archive) libraries, they&amp;rsquo;re not part of
the compiled program - they&amp;rsquo;re loaded in at the start of run-time if
they&amp;rsquo;re not already being used. You don&amp;rsquo;t need to worry about them
unless you&amp;rsquo;re a system manager or applications writer.&lt;/p&gt;

&lt;h1 id=&#34;every-shared-library-has&#34;&gt;Every shared library has &amp;hellip;&lt;/h1&gt;

&lt;h2 id=&#34;soname&#34;&gt;soname&lt;/h2&gt;

&lt;p&gt;libname.so.version_number - the version number is incremented whenever
the interface changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;libNAME.so.&amp;lt;version_number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;realname&#34;&gt;realname&lt;/h2&gt;

&lt;p&gt;The filename containing the actual library code. The &amp;ldquo;real name&amp;rdquo; adds
to the &amp;ldquo;soname&amp;rdquo; a period, a minor number, another period, and the
release number. The last period and release number are optional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;libNAME.so.&amp;lt;version_number&amp;gt;.&amp;lt;minor_number&amp;gt;[.&amp;lt;release_number&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;linker-name&#34;&gt;linker name&lt;/h2&gt;

&lt;p&gt;The name that the compiler uses (the soname without any version number).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;libNAME.so
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;creating-shared-libraries&#34;&gt;Creating shared libraries&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To generate object files, use &lt;em&gt;-fPIC&lt;/em&gt; or &lt;em&gt;-fpic&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To create a library, use &lt;em&gt;cc -shared -Wl,-soname,your_soname -o
library_name file_list library_list&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To install, put the shared library in one of the special
directories then run ldconfig. This creates the &amp;ldquo;soname&amp;rdquo; as a symbolic
link to the &amp;ldquo;real name&amp;rdquo; and sets up the cache file
/etc/ld.so.cache. You also need to create the &amp;ldquo;linker name&amp;rdquo; - a
symbolic link to the soname&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;shared-libraries-at-run-time&#34;&gt;Shared libraries at run-time&lt;/h1&gt;

&lt;p&gt;On Linux, starting up an ELF binary executable automatically causes
the program loader /lib/ld-linux.so.X to be loaded and run, which in
turn, finds and loads all other shared libraries used by the
program. The list of directories to be searched is stored in the file
/etc/ld.so.conf (our file lists about 17 directories).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use the LD_LIBRARY_PATH environmental variable to change run-time
behaviour&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use &amp;ldquo;ldd program filename&amp;rdquo; to see the list of the sonames being
depended on, along with the directory that those names resolve to.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use export LD_DEBUG=files to print out information when you run
subsequent commands Note that libc.so.N is the C library, which is
used by just about all programs.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;how-to-get-the-soname&#34;&gt;How to get the SONAME&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;objdump -p /lib/libc.so.6  | grep SONAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;readelf -d  /lib/libc.so.6  | grep SONAME
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;get-default-shared-and-static-library-search-path&#34;&gt;Get default shared and static library search path&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;get the compiler default search path:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc -print-search-dirs | grep libraries | tr &#39;:&#39; &#39;\n&#39; | grep -v libraries | sed -E -e &#39;s/^ =(.*?)$/\1/g&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;get the linker default search path:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ld -verbose | grep -i &#39;search_dir&#39; | tr &#39;;&#39; &#39;\n&#39; | sed -E -e &#39;s/\s?SEARCH_DIR\(&amp;quot;(.+)&amp;quot;\)/\1/g&#39; -e &#39;/^$/d&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>