<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qemu on 項 思 偉 ~ Aal Izz Well!</title>
    <link>https://daveixiang.github.io/tags/qemu/</link>
    <description>Recent content in Qemu on 項 思 偉 ~ Aal Izz Well!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 10 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://daveixiang.github.io/tags/qemu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>sheepdog add pthread name</title>
      <link>https://daveixiang.github.io/articles/2017_05_10_sheepdog_add_pthread_name/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_05_10_sheepdog_add_pthread_name/</guid>
      <description>Because sheepdog is multi-thread program. So I think it&amp;rsquo;s better to add pthread name for convenient.
diff --git a/lib/work.c b/lib/work.c index 75b0807..3b40bf8 100644 --- a/lib/work.c +++ b/lib/work.c @@ -260,11 +260,21 @@ static int create_worker_threads(struct wq_info *wi, size_t nr_threads) int ret; while (wi-&amp;gt;nr_threads &amp;lt; nr_threads) { + char thdname[16]; ret = pthread_create(&amp;amp;thread, NULL, worker_routine, wi); if (ret != 0) { sd_err(&amp;quot;failed to create worker thread: %m&amp;quot;); return -1; } + + + snprintf(thdname, 16, &amp;quot;%s:%zu&amp;quot;, wi-&amp;gt;name, wi-&amp;gt;nr_threads); + + ret = pthread_setname_np(thread, thdname); + if (ret !</description>
    </item>
    
    <item>
      <title>SATA on QEMU</title>
      <link>https://daveixiang.github.io/articles/2017_04_29_sata_on_qemu/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_29_sata_on_qemu/</guid>
      <description>By default, QEMU emulates an IDE interface for attached storage devices.
If need a SATA AHCI controller, there is a way to emulate a SATA controller, by creating seperate devices and attaching your drive to it:
[..] -drive file=[YOUR IMAGE],if=none,id=[AN IMAGE ID] \ -device ich9-ahci,id=ahci \ -device ide-drive,drive=[AN IMAGE ID],bus=ahci.0 \ [..]  Sure enough, ich9-ahci is an Intel controller, which supports SATA.</description>
    </item>
    
    <item>
      <title>linux pci device driver using mmio demo</title>
      <link>https://daveixiang.github.io/articles/2017_04_25_linux_pci_device_driver_using_mmio_demo/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_25_linux_pci_device_driver_using_mmio_demo/</guid>
      <description>The pci driver is written to drive the qemu pci-helloworld device
pci-helloworld driver source code  the driver code pci-helloworld  #include &amp;lt;linux/init.h&amp;gt; #include &amp;lt;linux/kernel.h&amp;gt; #include &amp;lt;linux/module.h&amp;gt; #include &amp;lt;linux/pci.h&amp;gt; #include &amp;lt;linux/printk.h&amp;gt; #include &amp;lt;linux/proc_fs.h&amp;gt; #include &amp;lt;linux/seq_file.h&amp;gt; MODULE_LICENSE(&amp;quot;GPL&amp;quot;); static struct pci_dev *_pdev; static void __iomem *_mmio; static const struct pci_device_id pcidevtbl[] = { { 0x6688, 0x0001, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 }, { } /* terminate */ }; void pci_helloworld_reset_pointer(void __iomem *mmio) { iowrite8(1, mmio + 1); } void pci_helloworld_set_buf_len(void __iomem *mmio, uint8_t len) { iowrite8(len, mmio + 2); } void pci_helloworld_write_char(void __iomem *mmio, char c) { iowrite8(c, mmio + 0); } static int pci_helloworld_show(struct seq_file *m, void *v) { int i, len; char *buf; if (!</description>
    </item>
    
    <item>
      <title>qemu pci device demo</title>
      <link>https://daveixiang.github.io/articles/2017_04_25_qemu_pci_device_demo/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_25_qemu_pci_device_demo/</guid>
      <description>Add the device source code {QEMU_SRC}/hw/misc/pci-helloworld.c #include &amp;quot;qemu/osdep.h&amp;quot; #include &amp;quot;hw/hw.h&amp;quot; #include &amp;quot;hw/pci/pci.h&amp;quot; #include &amp;quot;qemu/event_notifier.h&amp;quot; typedef struct PCIHelloWorldDevState { PCIDevice parent_obj; int pos; char *buf; int buflen; MemoryRegion mmio; } PCIHelloWorldDevState; #define TYPE_PCI_HELLOWORLD_DEV &amp;quot;pci-helloworld&amp;quot; #define PCI_HELLOWORLD_DEV(obj) \ OBJECT_CHECK(PCIHelloWorldDevState, (obj), TYPE_PCI_HELLOWORLD_DEV) static uint64_t pci_helloworld_dev_mmio_read(void *opaque, hwaddr addr, unsigned size) { PCIHelloWorldDevState *d = opaque; if (addr == 0) return d-&amp;gt;buf[d-&amp;gt;pos ++]; else return d-&amp;gt;buflen; } static void pci_helloworld_dev_mmio_write(void *opaque, hwaddr addr, uint64_t val, unsigned size) { PCIHelloWorldDevState *d = opaque; switch(addr) { case 0: /* write byte */ if (!</description>
    </item>
    
    <item>
      <title>Compiling qemu guest agent msi package for windows</title>
      <link>https://daveixiang.github.io/articles/2017_04_05_compiling_qemu_guest_agent_msi_package_for_windows/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_05_compiling_qemu_guest_agent_msi_package_for_windows/</guid>
      <description> Install dependencies  mingw cross compilation toolchain
 msitool
 flex bison glib2-devel zlib-devel
  configure and build qemu-ga msi package ./configure --cross-prefix=x86_64-w64-mingw32- \ --enable-guest-agent \ --enable-guest-agent-msi  and
make msi  After a while, get the msi package:
[root@localhost qemu-2.8.1]# ls -l *msi -rw-r--r-- 1 root root 1711104 Apr 5 11:09 qemu-ga-x86_64.msi  </description>
    </item>
    
    <item>
      <title>Multiple ways to access QEMU Machine Protocol (QMP)</title>
      <link>https://daveixiang.github.io/articles/2017_02_28_multiple_ways_to_access_qmp/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_02_28_multiple_ways_to_access_qmp/</guid>
      <description>QMP (QEMU Machine Protocol) is quiet useful. QMP allows applications to communicate withh a running QEMU&amp;rsquo;s instance. There ae a few different ways to access the QEMU monitor to query the guest&amp;rsquo;s information, modify the guest state using the QMP commands.
Access QMP via libvirt’s qemu-monitor-command virsh qemu-monitor-command ${domain-name} --pretty &#39;{&amp;quot;execute&amp;quot;:&amp;quot;query-kvm&amp;quot;}&#39;  QMP via tcp socket  launch an qemu instance:  qemu-system-x86_64 --enable-kvm -drive if=virtio,format=qcow2,index=0,file=cirros-0.3.5-x86_64-disk.img --qmp tcp:127.0.0.1:12345,server  and the output in the terminal like:</description>
    </item>
    
    <item>
      <title>内存不够导致KVM OOM</title>
      <link>https://daveixiang.github.io/articles/2017_02_08_kvm_oom_case/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_02_08_kvm_oom_case/</guid>
      <description>KVM OOM  [451452.773003] [ pid ] uid tgid total_vm rss nr_ptes swapents oom_score_adj name [451452.773008] [ 395] 0 395 9240 1094 21 44 0 systemd-journal [451452.773010] [ 423] 0 423 29723 151 26 84 0 lvmetad [451452.773011] [ 429] 0 429 10897 261 21 109 -1000 systemd-udevd [451452.773013] [ 563] 0 563 13854 298 25 89 -1000 auditd [451452.773015] [ 585] 997 585 131910 320 55 1795 0 polkitd [451452.</description>
    </item>
    
  </channel>
</rss>