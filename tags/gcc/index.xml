<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gcc on 項 思 偉 ~ Aal Izz Well!</title>
    <link>https://daveixiang.github.io/tags/gcc/</link>
    <description>Recent content in Gcc on 項 思 偉 ~ Aal Izz Well!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://daveixiang.github.io/tags/gcc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build Cross GCC Toolchain (TARGET:x86_64)</title>
      <link>https://daveixiang.github.io/articles/2017_04_01_build_cross_gcc_toolchain_x86_64/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_04_01_build_cross_gcc_toolchain_x86_64/</guid>
      <description>export BASE_DIR=/src/cross/ export LOG_DIR=$BASE_DIR/log export SRC_DIR=$BASE_DIR/src export BUILD_DIR=$BASE_DIR/build export INSTALL_DIR=$BASE_DIR/x86_64 export SYSROOT_DIR=$INSTALL_DIR/sysroot export TARGET_MACH=x86_64-linux-gnu export LINUX_ARCH=x86_64 export BUILD_MACH=$(gcc -dumpmachine) export binutils_version=binutils-2.27 export kernel_version=linux-4.4.51 export gcc_version=gcc-5.4.0 export glibc_version=glibc-2.25 export BINUTILS_SRC=$SRC_DIR/$binutils_version export KERNEL_SRC=$SRC_DIR/$kernel_version export GCC_SRC=$SRC_DIR/$gcc_version export GLIBC_SRC=$SRC_DIR/$glibc_version wrap_cmd() { stage=$1; shift LOGFILE=&amp;quot;$LOG_DIR/$stage.log&amp;quot; rm -rf &amp;quot;$LOGFILE&amp;quot; echo &amp;quot;begin $stage&amp;quot; for cmd in &amp;quot;$@&amp;quot; do echo &amp;quot;begin $cmd&amp;quot; eval &amp;quot;$cmd &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&amp;amp;1&amp;quot; [ $? -ne 0 ] &amp;amp;&amp;amp; echo &amp;quot;error&amp;quot; &amp;amp;&amp;amp; exit 1 echo &amp;quot;end $cmd&amp;quot; done echo &amp;quot;end $stage&amp;quot; } rm -rf $BUILD_DIR mkdir -p $BUILD_DIR mkdir -p $SRC_DIR $LOG_DIR # wrap_cmd &amp;quot;00.</description>
    </item>
    
    <item>
      <title>GCC and Glibc core runtime files</title>
      <link>https://daveixiang.github.io/articles/2017_03_31_gcc_glibc_core_runtime_files/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_03_31_gcc_glibc_core_runtime_files/</guid>
      <description>Files provided by glibc     file usage     crt0.o Older style of the initial runtime code. No one generates this anymore.   crt1.o Newer style of the initial runtime code. Contains the _start symbol which sets up the env with argc/argv/libc _init/libc _fini before jumping to the libc main. glibc calls this file &amp;lsquo;start.S&amp;rsquo;.   crti.o Defines the function prolog; _init in the .</description>
    </item>
    
    <item>
      <title>Build Cross GCC Toolchain (TARGET:arm64)</title>
      <link>https://daveixiang.github.io/articles/2017_02_25_build_cross_gcc_toolchain_arm64/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_02_25_build_cross_gcc_toolchain_arm64/</guid>
      <description>export BASE_DIR=/src/cross/ export LOG_DIR=$BASE_DIR/log export SRC_DIR=$BASE_DIR/src export BUILD_DIR=$BASE_DIR/build export INSTALL_DIR=$BASE_DIR/aarch64 export SYSROOT_DIR=$INSTALL_DIR/sysroot export BINUTILS_SRC=$SRC_DIR/binutils-2.27 export KERNEL_SRC=$SRC_DIR/linux-4.4.51 export GCC_SRC=$SRC_DIR/gcc-5.4.0 export GLIBC_SRC=$SRC_DIR/glibc-2.25 export TARGET_MACH=aarch64-linux-gnu export LINUX_ARCH=arm64 export BUILD_MACH=$(gcc -dumpmachine) wrap_cmd() { stage=$1; shift LOGFILE=&amp;quot;$LOG_DIR/$stage.log&amp;quot; rm -rf &amp;quot;$LOGFILE&amp;quot; echo &amp;quot;begin $stage&amp;quot; for cmd in &amp;quot;$@&amp;quot; do echo &amp;quot;begin $cmd&amp;quot; eval &amp;quot;$cmd &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&amp;amp;1&amp;quot; [ $? -ne 0 ] &amp;amp;&amp;amp; echo &amp;quot;error&amp;quot; &amp;amp;&amp;amp; exit 1 echo &amp;quot;end $cmd&amp;quot; done echo &amp;quot;end $stage&amp;quot; } rm -rf $BUILD_DIR mkdir -p $BUILD_DIR wrap_cmd &amp;quot;01.</description>
    </item>
    
    <item>
      <title>GCC inline assembly hello world example</title>
      <link>https://daveixiang.github.io/articles/2017_02_17_gcc_inline_assembly_hello_world_example/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/articles/2017_02_17_gcc_inline_assembly_hello_world_example/</guid>
      <description>x86 example  #include &amp;lt;string.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; int main(int argc, char *argv[]) { char *str = &amp;quot;Hello World\n&amp;quot;; long len = strlen(str); int ret = 0; /* * ssize_t write(int fd, const void *buf, size_t count); * */ __asm__(&amp;quot;movl $1, %%eax\n\t&amp;quot; // write syscall &amp;quot;movl $1, %%ebx\n\t&amp;quot; // fd &amp;quot;movl %1, %%ecx\n\t&amp;quot; // buf &amp;quot;movl %2, %%edx\n\t&amp;quot; // count &amp;quot;syscall\n\t&amp;quot; &amp;quot;movl %%eax, %0&amp;quot; // return result to ret : &amp;quot;+m&amp;quot;(ret) : &amp;quot;g&amp;quot;(str), &amp;quot;g&amp;quot;(len)); printf(&amp;quot;ret %d\n&amp;quot;, ret); return 0; }   x86-64 example  #include &amp;lt;string.</description>
    </item>
    
  </channel>
</rss>