<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gcc on 項 思 偉 (Davei) ~ Aal Izz Well!</title>
    <link>https://daveixiang.github.io/tags/gcc/index.xml</link>
    <description>Recent content in Gcc on 項 思 偉 (Davei) ~ Aal Izz Well!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="https://daveixiang.github.io/tags/gcc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Build Cross GCC Toolchain (TARGET:x86_64)</title>
      <link>https://daveixiang.github.io/tech/2017_04_01_build_cross_gcc_toolchain_x86_64/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/tech/2017_04_01_build_cross_gcc_toolchain_x86_64/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export BASE_DIR=/src/cross/
export LOG_DIR=$BASE_DIR/log
export SRC_DIR=$BASE_DIR/src
export BUILD_DIR=$BASE_DIR/build
export INSTALL_DIR=$BASE_DIR/aarch64
export SYSROOT_DIR=$INSTALL_DIR/sysroot

export binutils_version=binutils-2.27
export kernel_version=linux-4.4.51
export gcc_version=gcc-5.4.0
export glibc_version=glibc-2.25

export BINUTILS_SRC=$SRC_DIR/$binutils_version
export KERNEL_SRC=$SRC_DIR/$kernel_version
export GCC_SRC=$SRC_DIR/$gcc_version
export GLIBC_SRC=$SRC_DIR/$glibc_version

export TARGET_MACH=x86_64-linux-gnu
export LINUX_ARCH=x86_64
export BUILD_MACH=$(gcc -dumpmachine)

wrap_cmd() {
    stage=$1; shift
    LOGFILE=&amp;quot;$LOG_DIR/$stage.log&amp;quot;
    rm -rf &amp;quot;$LOGFILE&amp;quot;
    echo &amp;quot;begin $stage&amp;quot;
    for cmd in &amp;quot;$@&amp;quot;
    do
    echo &amp;quot;begin $cmd&amp;quot;
    eval &amp;quot;$cmd &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&amp;amp;1&amp;quot;
    [ $? -ne 0 ] &amp;amp;&amp;amp; echo &amp;quot;error&amp;quot; &amp;amp;&amp;amp; exit 1
    echo &amp;quot;end $cmd&amp;quot;
    done
    echo &amp;quot;end $stage&amp;quot;
}

rm -rf $BUILD_DIR
mkdir -p $BUILD_DIR

mkdir -p $SRC_DIR $LOG_DIR

# wrap_cmd &amp;quot;00.download_packages&amp;quot; \
#     &amp;quot;cd $SRC_DIR&amp;quot; \
#     &amp;quot;wget https://mirrors4.tuna.tsinghua.edu.cn/gnu/binutils/$binutils_version.tar.bz2&amp;quot; \
#     &amp;quot;wget https://mirrors4.tuna.tsinghua.edu.cn/gnu/gcc/$gcc_version/$gcc_version.tar.bz2&amp;quot; \
#     &amp;quot;wget https://mirrors4.tuna.tsinghua.edu.cn/gnu/glibc/$glibc_version.tar.bz2&amp;quot; \
#     &amp;quot;wget https://mirrors4.tuna.tsinghua.edu.cn/kernel/v4.x/$kernel_version.tar.gz&amp;quot; 

wrap_cmd &amp;quot;01.binutils_extract&amp;quot; \
     &amp;quot;rm -rf $BINUTILS_SRC&amp;quot; \
     &amp;quot;tar jxf $BINUTILS_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;mkdir -p $BUILD_DIR/binutils&amp;quot;

wrap_cmd &amp;quot;02.binutils_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/binutils&amp;quot; \
     &amp;quot;$BINUTILS_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --target=$TARGET_MACH --with-sysroot=$SYSROOT_DIR --disable-werror&amp;quot;

wrap_cmd &amp;quot;03.binutils_build&amp;quot; \
     &amp;quot;cd $BUILD_DIR/binutils&amp;quot; \
     &amp;quot;make -j$(nproc)&amp;quot; &amp;quot;make install&amp;quot;

wrap_cmd &amp;quot;04.linux_extract&amp;quot; \
     &amp;quot;rm -rf $KERNEL_SRC&amp;quot; \
     &amp;quot;tar zxf $KERNEL_SRC.tar.gz -C $SRC_DIR/&amp;quot;

wrap_cmd &amp;quot;05.linux_header_install&amp;quot; &amp;quot;cd $KERNEL_SRC&amp;quot; &amp;quot;make mrproper&amp;quot; &amp;quot;make ARCH=$LINUX_ARCH INSTALL_HDR_PATH=$SYSROOT_DIR/usr headers_install&amp;quot;

wrap_cmd &amp;quot;06.gcc_extract&amp;quot; \
     &amp;quot;rm -rf $GCC_SRC&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/bootstrap-gcc&amp;quot; \
     &amp;quot;tar jxf $GCC_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;sed -i -e &#39;/k prot/agcc_cv_libc_provides_ssp=yes&#39; $GCC_SRC/gcc/configure&amp;quot; \
     &amp;quot;mkdir $BUILD_DIR/bootstrap-gcc&amp;quot;

wrap_cmd &amp;quot;07.gcc_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/bootstrap-gcc&amp;quot; \
     &amp;quot;$GCC_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --host=$BUILD_MACH --target=$TARGET_MACH --without-headers --enable-boostrap --enable-languages=&#39;c&#39; --disable-threads --enable-__cxa_atexit --disable-libmudflap --with-gnu-ld --with-gnu-as --disable-libssp --disable-libgomp --disable-nls --disable-shared&amp;quot;

wrap_cmd &amp;quot;08.gcc_build&amp;quot; \
     &amp;quot;make -j$(nproc) all-gcc&amp;quot; \
     &amp;quot;make install-gcc&amp;quot; \
     &amp;quot;make -j$(nproc) all-target-libgcc&amp;quot; \
     &amp;quot;make install-target-libgcc&amp;quot;


wrap_cmd &amp;quot;09.glibc_extract&amp;quot; \
     &amp;quot;rm -rf $GLIBC_SRC&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/libc&amp;quot; \
     &amp;quot;tar jxf $GLIBC_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;mkdir -pv $BUILD_DIR/libc&amp;quot;

wrap_cmd &amp;quot;10.glibc_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/libc&amp;quot; \
     &amp;quot;echo &#39;libc_cv_forced_unwind=yes&#39; &amp;gt; config.cache&amp;quot; &amp;quot;echo &#39;libc_cv_c_cleanup=yes&#39; &amp;gt;&amp;gt; config.cache&amp;quot; \
     &amp;quot;export PATH=$INSTALL_DIR/bin:$PATH&amp;quot; &amp;quot;export CC=${TARGET_MACH}-gcc&amp;quot; &amp;quot;export LD=${CROSS}-ld&amp;quot; &amp;quot;export AS=${TARGET_MACH}-as&amp;quot; \
     &amp;quot;$GLIBC_SRC/configure --prefix=/usr --build=$BUILD_MACH --host=$TARGET_MACH --with-headers=$SYSROOT_DIR/usr/include --config-cache --enable-kernel=2.6.32&amp;quot;

wrap_cmd &amp;quot;11.glibc_build&amp;quot; \
     &amp;quot;make -k install-headers cross_compiling=yes install_root=$SYSROOT_DIR&amp;quot; \
     &amp;quot;make -j$(nproc)&amp;quot; \
     &amp;quot;make install_root=$SYSROOT_DIR install&amp;quot; \
     &amp;quot;ln -sf $SYSROOT_DIR/lib64 $SYSROOT_DIR/lib&amp;quot; \
     &amp;quot;ln -sf $SYSROOT_DIR/usr/lib64 $SYSROOT_DIR/usr/lib&amp;quot; \
     &amp;quot;unset CC&amp;quot; &amp;quot;unset LD&amp;quot; &amp;quot;unset AS&amp;quot;

wrap_cmd &amp;quot;12.gcc-final-01_extract&amp;quot; \
     &amp;quot;rm -rf $GCC_SRC&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/final-gcc-01&amp;quot; \
     &amp;quot;tar jxf $GCC_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;mkdir -pv $BUILD_DIR/final-gcc-01&amp;quot;

wrap_cmd &amp;quot;13.gcc-final-01_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/final-gcc-01&amp;quot; \
     &amp;quot;echo &#39;libc_cv_forced_unwind=yes&#39; &amp;gt; config.cache&amp;quot; &amp;quot;echo &#39;libc_cv_c_cleanup=yes&#39; &amp;gt;&amp;gt; config.cache&amp;quot; \
     &amp;quot;$GCC_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --target=$TARGET_MACH --with-sysroot=$SYSROOT_DIR --enable-languages=&#39;c,c++&#39; --with-gnu-as --with-gnu-ld --disable-multilib --disable-nls --enable-threads=posix --enable-long-longx&amp;quot;

wrap_cmd &amp;quot;14.gcc-final-01_build&amp;quot; \
     &amp;quot;make -j$(nproc) all-gcc&amp;quot; \
     &amp;quot;make install-gcc&amp;quot;


wrap_cmd &amp;quot;13.gcc-final-02_extract&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/final-gcc-02&amp;quot; \
     &amp;quot;mkdir -pv $BUILD_DIR/final-gcc-02&amp;quot;

wrap_cmd &amp;quot;14.gcc-final-02_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/final-gcc-02&amp;quot; \
     &amp;quot;echo &#39;libc_cv_forced_unwind=yes&#39; &amp;gt; config.cache&amp;quot; &amp;quot;echo &#39;libc_cv_c_cleanup=yes&#39; &amp;gt;&amp;gt; config.cache&amp;quot; \
     &amp;quot;$GCC_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --target=$TARGET_MACH --with-sysroot=$SYSROOT_DIR --enable-languages=&#39;c,c++&#39; --with-gnu-as --with-gnu-ld --disable-multilib --disable-nls --enable-threads=posix --disable-libssp --enable-long-longx --with-shared&amp;quot;


wrap_cmd &amp;quot;15.gcc-final-02_build&amp;quot; \
     &amp;quot;make -j$(nproc)&amp;quot; \
     &amp;quot;make install&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GCC and Glibc core runtime files</title>
      <link>https://daveixiang.github.io/tech/2017_03_31_gcc_glibc_core_runtime_files/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/tech/2017_03_31_gcc_glibc_core_runtime_files/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Files provided by glibc&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;file&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crt0.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Older style of the initial runtime code. No one generates this anymore.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crt1.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Newer style of the initial runtime code. Contains the _start symbol which sets up the env with argc/argv/libc _init/libc _fini before jumping to the libc main. glibc calls this file &amp;lsquo;start.S&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crti.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Defines the function prolog; _init in the .init section and _fini in the .fini section. glibc calls this &amp;lsquo;initfini.c&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtn.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Defines the function epilog. glibc calls this &amp;lsquo;initfini.c&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Scrt1.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crt1.o when generating PIEs.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gcrt1.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crt1.o when generating code with profiling information. Compile with -pg. Produces output suitable for the gprof util.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Mcrt1.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Like gcrt1.o, but is used with the prof utility. glibc installs this as a dummy file as it&amp;rsquo;s useless on linux systems.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Files provides by gcc&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;file&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtbegin.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;GCC uses this to find the start of the constructors.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtbeginS.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crtbegin.o when generating shared objects/PIEs.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtbeginT.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crtbegin.o when generating static executables.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtend.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;GCC uses this to find the start of the destructors.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;crtendS.o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Used in place of crtend.o when generating shared objects/PIEs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Build Cross GCC Toolchain (TARGET:arm64)</title>
      <link>https://daveixiang.github.io/tech/2017_02_25_build_cross_gcc_toolchain_arm64/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daveixiang.github.io/tech/2017_02_25_build_cross_gcc_toolchain_arm64/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export BASE_DIR=/src/cross/
export LOG_DIR=$BASE_DIR/log
export SRC_DIR=$BASE_DIR/src
export BUILD_DIR=$BASE_DIR/build
export INSTALL_DIR=$BASE_DIR/aarch64
export SYSROOT_DIR=$INSTALL_DIR/sysroot

export BINUTILS_SRC=$SRC_DIR/binutils-2.27
export KERNEL_SRC=$SRC_DIR/linux-4.4.51
export GCC_SRC=$SRC_DIR/gcc-5.4.0
export GLIBC_SRC=$SRC_DIR/glibc-2.25

export TARGET_MACH=aarch64-linux-gnu
export LINUX_ARCH=arm64
export BUILD_MACH=$(gcc -dumpmachine)

wrap_cmd() {
    stage=$1; shift
    LOGFILE=&amp;quot;$LOG_DIR/$stage.log&amp;quot;
    rm -rf &amp;quot;$LOGFILE&amp;quot;
    echo &amp;quot;begin $stage&amp;quot;
    for cmd in &amp;quot;$@&amp;quot;
    do
    echo &amp;quot;begin $cmd&amp;quot;
    eval &amp;quot;$cmd &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&amp;amp;1&amp;quot;
    [ $? -ne 0 ] &amp;amp;&amp;amp; echo &amp;quot;error&amp;quot; &amp;amp;&amp;amp; exit 1
    echo &amp;quot;end $cmd&amp;quot;
    done
    echo &amp;quot;end $stage&amp;quot;
}

rm -rf $BUILD_DIR
mkdir -p $BUILD_DIR

wrap_cmd &amp;quot;01.binutils_extract&amp;quot; \
     &amp;quot;rm -rf $BINUTILS_SRC&amp;quot; \
     &amp;quot;tar jxf $BINUTILS_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;mkdir -p $BUILD_DIR/binutils&amp;quot;

wrap_cmd &amp;quot;02.binutils_configure&amp;quot; &amp;quot;cd $BUILD_DIR/binutils&amp;quot; &amp;quot;$BINUTILS_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --target=$TARGET_MACH --with-sysroot=$SYSROOT_DIR --disable-werror&amp;quot;
wrap_cmd &amp;quot;03.binutils_build&amp;quot; &amp;quot;cd $BUILD_DIR/binutils&amp;quot; &amp;quot;make -j$(nproc)&amp;quot; &amp;quot;make install&amp;quot;

wrap_cmd &amp;quot;04.linux_extract&amp;quot; &amp;quot;rm -rf $KERNEL_SRC&amp;quot; &amp;quot;tar zxf $KERNEL_SRC.tar.gz -C $SRC_DIR/&amp;quot;
wrap_cmd &amp;quot;05.linux_header_install&amp;quot; &amp;quot;cd $KERNEL_SRC&amp;quot; &amp;quot;make mrproper&amp;quot; &amp;quot;make ARCH=$LINUX_ARCH INSTALL_HDR_PATH=$SYSROOT_DIR/usr headers_install&amp;quot;

wrap_cmd &amp;quot;06.gcc_extract&amp;quot; \
&amp;quot;rm -rf $GCC_SRC&amp;quot; \
&amp;quot;rm -rf $BUILD_DIR/bootstrap-gcc&amp;quot; \
&amp;quot;tar jxf $GCC_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
&amp;quot;sed -i -e &#39;/k prot/agcc_cv_libc_provides_ssp=yes&#39; $GCC_SRC/gcc/configure&amp;quot; \
&amp;quot;mkdir $BUILD_DIR/bootstrap-gcc&amp;quot;

wrap_cmd &amp;quot;07.gcc_configure&amp;quot; \
&amp;quot;cd $BUILD_DIR/bootstrap-gcc&amp;quot; \
&amp;quot;$GCC_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --host=$BUILD_MACH --target=$TARGET_MACH --without-headers --enable-boostrap --enable-languages=&#39;c&#39; --disable-threads --enable-__cxa_atexit --disable-libmudflap --with-gnu-ld --with-gnu-as --disable-libssp --disable-libgomp --disable-nls --disable-shared&amp;quot;

wrap_cmd &amp;quot;08.gcc_build&amp;quot; \
&amp;quot;make -j$(nproc) all-gcc&amp;quot; \
&amp;quot;make install-gcc&amp;quot; \
&amp;quot;make -j$(nproc) all-target-libgcc&amp;quot; \
&amp;quot;make install-target-libgcc&amp;quot;


wrap_cmd &amp;quot;09.glibc_extract&amp;quot; \
     &amp;quot;rm -rf $GLIBC_SRC&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/libc&amp;quot; \
     &amp;quot;tar jxf $GLIBC_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;mkdir -pv $BUILD_DIR/libc&amp;quot;

wrap_cmd &amp;quot;10.glibc_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/libc&amp;quot; \
     &amp;quot;echo &#39;libc_cv_forced_unwind=yes&#39; &amp;gt; config.cache&amp;quot; &amp;quot;echo &#39;libc_cv_c_cleanup=yes&#39; &amp;gt;&amp;gt; config.cache&amp;quot; \
     &amp;quot;export PATH=$INSTALL_DIR/bin:$PATH&amp;quot; &amp;quot;export CC=${TARGET_MACH}-gcc&amp;quot; &amp;quot;export LD=${CROSS}-ld&amp;quot; &amp;quot;export AS=${TARGET_MACH}-as&amp;quot; \
     &amp;quot;$GLIBC_SRC/configure --prefix=/usr --build=$BUILD_MACH --host=$TARGET_MACH --with-headers=$SYSROOT_DIR/usr/include --config-cache --enable-kernel=2.6.32&amp;quot;

wrap_cmd &amp;quot;11.glibc_build&amp;quot; \
     &amp;quot;make -k install-headers cross_compiling=yes install_root=$SYSROOT_DIR&amp;quot; \
     &amp;quot;make -j$(nproc)&amp;quot; \
     &amp;quot;make install_root=$SYSROOT_DIR install&amp;quot; \
     &amp;quot;ln -sf $SYSROOT_DIR/lib64 $SYSROOT_DIR/lib&amp;quot; \
     &amp;quot;ln -sf $SYSROOT_DIR/usr/lib64 $SYSROOT_DIR/usr/lib&amp;quot; \
     &amp;quot;unset CC&amp;quot; &amp;quot;unset LD&amp;quot; &amp;quot;unset AS&amp;quot;

wrap_cmd &amp;quot;12.gcc-final-01_extract&amp;quot; \
     &amp;quot;rm -rf $GCC_SRC&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/final-gcc-01&amp;quot; \
     &amp;quot;tar jxf $GCC_SRC.tar.bz2 -C $SRC_DIR/&amp;quot; \
     &amp;quot;mkdir -pv $BUILD_DIR/final-gcc-01&amp;quot;

wrap_cmd &amp;quot;13.gcc-final-01_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/final-gcc-01&amp;quot; \
     &amp;quot;echo &#39;libc_cv_forced_unwind=yes&#39; &amp;gt; config.cache&amp;quot; &amp;quot;echo &#39;libc_cv_c_cleanup=yes&#39; &amp;gt;&amp;gt; config.cache&amp;quot; \
     &amp;quot;$GCC_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --target=$TARGET_MACH --with-sysroot=$SYSROOT_DIR --enable-languages=&#39;c,c++&#39; --with-gnu-as --with-gnu-ld --disable-multilib --disable-nls --enable-threads=posix --enable-long-longx&amp;quot;

wrap_cmd &amp;quot;14.gcc-final-01_build&amp;quot; \
     &amp;quot;make -j$(nproc) all-gcc&amp;quot; \
     &amp;quot;make install-gcc&amp;quot;


wrap_cmd &amp;quot;13.gcc-final-02_extract&amp;quot; \
     &amp;quot;rm -rf $BUILD_DIR/final-gcc-02&amp;quot; \
     &amp;quot;mkdir -pv $BUILD_DIR/final-gcc-02&amp;quot;

wrap_cmd &amp;quot;14.gcc-final-02_configure&amp;quot; \
     &amp;quot;cd $BUILD_DIR/final-gcc-02&amp;quot; \
     &amp;quot;echo &#39;libc_cv_forced_unwind=yes&#39; &amp;gt; config.cache&amp;quot; &amp;quot;echo &#39;libc_cv_c_cleanup=yes&#39; &amp;gt;&amp;gt; config.cache&amp;quot; \
     &amp;quot;$GCC_SRC/configure --prefix=$INSTALL_DIR --build=$BUILD_MACH --target=$TARGET_MACH --with-sysroot=$SYSROOT_DIR --enable-languages=&#39;c,c++&#39; --with-gnu-as --with-gnu-ld --disable-multilib --disable-nls --enable-threads=posix --disable-libssp --enable-long-longx --with-shared&amp;quot;


wrap_cmd &amp;quot;15.gcc-final-02_build&amp;quot; \
     &amp;quot;make -j$(nproc)&amp;quot; \
     &amp;quot;make install&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>